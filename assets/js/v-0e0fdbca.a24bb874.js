"use strict";(self.webpackChunklearning_docs_2_x=self.webpackChunklearning_docs_2_x||[]).push([[5031],{1372:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-0e0fdbca",path:"/java/java-basics/03-java-class-and-object.html",title:"第三章 对象与类",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"3.1 面向对象概述",slug:"_3-1-面向对象概述",children:[{level:3,title:"对象",slug:"对象",children:[]},{level:3,title:"类",slug:"类",children:[]},{level:3,title:"类与对象的区别",slug:"类与对象的区别",children:[]},{level:3,title:"面向对象程序设计的特点",slug:"面向对象程序设计的特点",children:[]},{level:3,title:"类与对象之间的关系",slug:"类与对象之间的关系",children:[]},{level:3,title:"类之间的关系",slug:"类之间的关系",children:[]}]},{level:2,title:"3.2 类与对象",slug:"_3-2-类与对象",children:[{level:3,title:"类的定义",slug:"类的定义",children:[]},{level:3,title:"成员变量",slug:"成员变量",children:[]},{level:3,title:"成员方法",slug:"成员方法",children:[]},{level:3,title:"构造方法",slug:"构造方法",children:[]},{level:3,title:"局部变量",slug:"局部变量",children:[]},{level:3,title:"局部变量的有效范围",slug:"局部变量的有效范围",children:[]},{level:3,title:"对象的创建",slug:"对象的创建",children:[]},{level:3,title:"访问对象的属性和行为",slug:"访问对象的属性和行为",children:[]},{level:3,title:"对象的销毁",slug:"对象的销毁",children:[]},{level:3,title:"this关键字",slug:"this关键字",children:[]}]},{level:2,title:"3.3 static 关键字",slug:"_3-3-static-关键字",children:[{level:3,title:"静态变量",slug:"静态变量",children:[]},{level:3,title:"静态常量",slug:"静态常量",children:[]},{level:3,title:"静态方法",slug:"静态方法",children:[]},{level:3,title:"静态代码块",slug:"静态代码块",children:[]}]},{level:2,title:"3.4 类的主方法",slug:"_3-4-类的主方法",children:[]},{level:2,title:"3.5 类设计技巧",slug:"_3-5-类设计技巧",children:[]},{level:2,title:"3.6 包",slug:"_3-6-包",children:[{level:3,title:"类的导入",slug:"类的导入",children:[]},{level:3,title:"静态导入",slug:"静态导入",children:[]},{level:3,title:"将类放入包中",slug:"将类放入包中",children:[]},{level:3,title:"包作用域",slug:"包作用域",children:[]},{level:3,title:"类路径",slug:"类路径",children:[]}]}],filePathRelative:"java/java-basics/03-java-class-and-object.md",git:{updatedTime:1658130428e3,contributors:[{name:"wangming",email:"wangming@ttg.cn",commits:1}]}}},92:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h1 id="第三章-对象与类" tabindex="-1"><a class="header-anchor" href="#第三章-对象与类" aria-hidden="true">#</a> 第三章 对象与类</h1><p>面向对象开发，是编程的精髓...也许，你就只有这个机会能面向对象哈哈哈哈哈。。。</p><h2 id="_3-1-面向对象概述" tabindex="-1"><a class="header-anchor" href="#_3-1-面向对象概述" aria-hidden="true">#</a> 3.1 面向对象概述</h2><h3 id="对象" tabindex="-1"><a class="header-anchor" href="#对象" aria-hidden="true">#</a> 对象</h3><p>对象是一类事物的具体体现。对象是类的一个实例，必然具备该类事物的属性和行为。</p><h3 id="类" tabindex="-1"><a class="header-anchor" href="#类" aria-hidden="true">#</a> 类</h3><p>类是同一类事务的统称，如果将现实世界中的一个事务抽象成对象，类就是这类对象的统称。</p><p>类是构造对象时所依赖的规范。</p><h3 id="类与对象的区别" tabindex="-1"><a class="header-anchor" href="#类与对象的区别" aria-hidden="true">#</a> 类与对象的区别</h3><ul><li>面向过程：强调步骤</li><li>面向对象：强调对象。。。</li></ul><h3 id="面向对象程序设计的特点" tabindex="-1"><a class="header-anchor" href="#面向对象程序设计的特点" aria-hidden="true">#</a> 面向对象程序设计的特点</h3><ul><li>封装性</li><li>继承性</li><li>多态性</li></ul><h3 id="类与对象之间的关系" tabindex="-1"><a class="header-anchor" href="#类与对象之间的关系" aria-hidden="true">#</a> 类与对象之间的关系</h3><ul><li>类对一类事物的描述，是<strong>抽象的</strong></li><li>对象是一类事物的实例，是<strong>具体的</strong></li><li><strong>类是对象的模版，对象是类的实体</strong></li></ul><h3 id="类之间的关系" tabindex="-1"><a class="header-anchor" href="#类之间的关系" aria-hidden="true">#</a> 类之间的关系</h3><ul><li>依赖</li><li>聚合</li><li>继承</li></ul><h2 id="_3-2-类与对象" tabindex="-1"><a class="header-anchor" href="#_3-2-类与对象" aria-hidden="true">#</a> 3.2 类与对象</h2><h3 id="类的定义" tabindex="-1"><a class="header-anchor" href="#类的定义" aria-hidden="true">#</a> 类的定义</h3><p>Java中定义类使用关键字class关键字</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">ClassName</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">// 成员变量</span>\n    <span class="token comment">// 成员方法</span>\n    field1\n    field2\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    constructor1\n    constructor2\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    method1\n    method2\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>下面是一个简单的Employee类</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Employee</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">double</span> salary<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">LocalDate</span> hireDay<span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token class-name">String</span> n<span class="token punctuation">,</span> <span class="token keyword">double</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> year<span class="token punctuation">,</span> <span class="token keyword">int</span> month<span class="token punctuation">,</span> <span class="token keyword">int</span> day<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        name <span class="token operator">=</span> n<span class="token punctuation">;</span>\n        salary <span class="token operator">=</span> s<span class="token punctuation">;</span>\n        hireDay <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span>month<span class="token punctuation">,</span> day<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> name<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// more methods</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>这里展示Employee类的实际使用</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">LocalDate</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmployeeTest</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 构造了一个Employee数组，并填入了三个雇员对象</span>\n        <span class="token class-name">Employee</span><span class="token punctuation">[</span><span class="token punctuation">]</span> staff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n        staff<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">&quot;Carl Cracker&quot;</span><span class="token punctuation">,</span><span class="token number">75000</span><span class="token punctuation">,</span> <span class="token number">1987</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        staff<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">&quot;Harry Hacker&quot;</span><span class="token punctuation">,</span> <span class="token number">50000</span><span class="token punctuation">,</span> <span class="token number">1989</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        staff<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">&quot;Tony Tester&quot;</span><span class="token punctuation">,</span> <span class="token number">40000</span><span class="token punctuation">,</span> <span class="token number">1990</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 利用Employee类的reiseSalary方法将每个雇员的薪水提高5%：</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Employee</span> e <span class="token operator">:</span> staff<span class="token punctuation">)</span>\n            e<span class="token punctuation">.</span><span class="token function">raiseSalary</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n        <span class="token comment">// 最后调用`getName`方法，`getSalary`方法和`getHireDay`方法将每个雇员的信息打印出来：</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Employee</span> e<span class="token operator">:</span> staff<span class="token punctuation">)</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;name=&quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;, salary=&quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;, hireday=&quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getHireDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n\n<span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">double</span> salary<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">LocalDate</span> hireDay<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token class-name">String</span> n<span class="token punctuation">,</span> <span class="token keyword">double</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> year<span class="token punctuation">,</span> <span class="token keyword">int</span> month<span class="token punctuation">,</span> <span class="token keyword">int</span> day<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        name <span class="token operator">=</span> n<span class="token punctuation">;</span>\n        salary <span class="token operator">=</span> s<span class="token punctuation">;</span>\n        hireDay <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> day<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> name<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> salary<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSalary</span><span class="token punctuation">(</span><span class="token keyword">double</span> salary<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>salary <span class="token operator">=</span> salary<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">LocalDate</span> <span class="token function">getHireDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> hireDay<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHireDay</span><span class="token punctuation">(</span><span class="token class-name">LocalDate</span> hireDay<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>hireDay <span class="token operator">=</span> hireDay<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">raiseSalary</span><span class="token punctuation">(</span><span class="token keyword">double</span> byPercent<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">double</span> raise <span class="token operator">=</span> salary <span class="token operator">*</span> byPercent <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">;</span>\n        salary <span class="token operator">+=</span> raise<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br></div></div><p>在这个示例程序中包含两个类：Employee类和带有public访问修饰符的EmployeeTest类。EmployeeTest类包含了main方法。</p><h3 id="成员变量" tabindex="-1"><a class="header-anchor" href="#成员变量" aria-hidden="true">#</a> 成员变量</h3><p>在Java中对象的属性也称为成员变量，成员变量的定义与普通变量的定义一样。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>数据类型 变量名称 <span class="token punctuation">[</span> <span class="token operator">=</span> 值<span class="token punctuation">]</span> <span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>其中[ = 值] 是可选内容，即定义变量时可以为其赋值，也可以不赋值。</p><p>例如创建一个鸟类Bird。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bird</span><span class="token punctuation">{</span>\n    <span class="token class-name">String</span> wing<span class="token punctuation">;</span>    <span class="token comment">// 翅膀</span>\n    <span class="token class-name">String</span> claw<span class="token punctuation">;</span>    <span class="token comment">// 爪子</span>\n    <span class="token class-name">String</span> beak<span class="token punctuation">;</span>    <span class="token comment">// 喙</span>\n    <span class="token class-name">String</span> feather<span class="token punctuation">;</span> <span class="token comment">// 羽毛</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>上述代码可以看到Java中使用class关键字来定义类，Bird是类的名称，同时在Bird类中定义了4个成员变量，成员变量可以设置为Java中合法的数据类型，成员变量其实就是普通的变脸，可以为它们设置初始值，也可以不设置初始值，如果不设置初始值，则会有默认值，Java中常见类型的默认值。</p><table><thead><tr><th>数据类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>byte、short、int、long</td><td>0</td><td>整型零</td></tr><tr><td>fload、double</td><td>0.0</td><td>浮点零</td></tr><tr><td>char</td><td>&#39; &#39;</td><td>空格字符</td></tr><tr><td>booleam</td><td>false</td><td>逻辑假</td></tr><tr><td>引用类型，例如String</td><td>null</td><td>空值</td></tr></tbody></table><h3 id="成员方法" tabindex="-1"><a class="header-anchor" href="#成员方法" aria-hidden="true">#</a> 成员方法</h3><p>在Java语言中，成员方法对应于类对象的行为，它主要用来定义类可执行的操作。</p><h4 id="成员方法的定义" tabindex="-1"><a class="header-anchor" href="#成员方法的定义" aria-hidden="true">#</a> 成员方法的定义</h4><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token punctuation">[</span>权限修饰符<span class="token punctuation">]</span> <span class="token punctuation">[</span>返回值类型<span class="token punctuation">]</span> 方法名 <span class="token punctuation">(</span> <span class="token punctuation">[</span>参数类型 参数名<span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token keyword">throws</span> 异常类型<span class="token punctuation">]</span> <span class="token punctuation">{</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">// 方法体</span>\n<span class="token keyword">return</span> 返回值<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="成员方法的参数" tabindex="-1"><a class="header-anchor" href="#成员方法的参数" aria-hidden="true">#</a> 成员方法的参数</h4><p>调用方法的时可以给该方法传递一个或多个值，传给方法的值叫做实参，在方法内部，接收实参的变量叫做形参，形参的声明语法和变量的声明语法一样。形参只在方法的内部有效。</p><p><strong>注意</strong> Java程序设计语言对对象采用的不是<code>引用调用</code>，实际上对象引用是按值传递的。(参考《Java核心技术》P120)</p><ul><li>一个方法不能修改一个基本数据类型的参数（即数值型活布尔型）</li><li>一个方法可以改变一个对象的参数状态</li><li>一个方法不能让对象参数引用一个新的对象</li></ul><p>Java中方法参数的的使用情况</p><h5 id="值参数" tabindex="-1"><a class="header-anchor" href="#值参数" aria-hidden="true">#</a> 值参数</h5><p>表明实参和形参之间按值传递。</p><p>在方法中对值类型的形参的修改并不会影响实参。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span><span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">Book</span> book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;运算结果： &quot;</span> <span class="token operator">+</span> book<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;实参x的值： &quot;</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        x <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>\n        <span class="token keyword">return</span> x<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h5 id="引用参数" tabindex="-1"><a class="header-anchor" href="#引用参数" aria-hidden="true">#</a> 引用参数</h5><p>如果在方法传递参数时。参数的类型是数组或者其他引用类型，那么，在方法中对参数的修改会反应到原有的数组或者其他引用类型上，这种类型的方法参数，为引用参数。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RefTest</span><span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">RefTest</span> refTest <span class="token operator">=</span> <span class="token keyword">new</span>  <span class="token class-name">RefTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> i <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;原始数据： &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        refTest<span class="token punctuation">.</span><span class="token function">change</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;修改后的数据： &quot;</span><span class="token punctuation">)</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>\n        i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>\n        i<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h5 id="不定参数" tabindex="-1"><a class="header-anchor" href="#不定参数" aria-hidden="true">#</a> 不定参数</h5><p>声明方法时，如果有若干哥相同类型的参数，可以定义为不定长参数，该类型的参数声明如下</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>权限修饰符 返回值类型 方法名<span class="token punctuation">(</span>参数类型<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 参数名<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>注意</strong>类型和参数名支线是三个点，而不是其他数量或省略号。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MultiTest</span><span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">MultiTest</span> multi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MultiTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;运算结果： &quot;</span> <span class="token operator">+</span> multi<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> x<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            result <span class="token operator">+=</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> result<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h4 id="成员方法的使用" tabindex="-1"><a class="header-anchor" href="#成员方法的使用" aria-hidden="true">#</a> 成员方法的使用</h4><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>对象<span class="token punctuation">.</span>成员方法<span class="token punctuation">(</span><span class="token punctuation">[</span>参数<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="构造方法" tabindex="-1"><a class="header-anchor" href="#构造方法" aria-hidden="true">#</a> 构造方法</h3><p>在类中出了成员方法之外，还存在一种特殊类型的方法，那就是构造方法。</p><p>构造方法是一个与类同名的方法，对象的创建就是通过构造方法完成的。每当类实例化一个对象时，类都会自动调用构造方法。</p><p><strong>注意</strong> 构造方法只能在实例化的时候自动调用，不能通过的类的成员对象的方法调用</p><p>特点：</p><ul><li>构造方法没有返回类型，也不能定义为void</li><li>构造方法的名称要与本类的名称相同</li><li>构造方法的主要作用是在完成对象的初始化工作，它能把定义对象的参数传给对象成员。</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span><span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token comment">// 构造方法</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在构造方法中可以给成员变量赋值，这样当实例化一个本类的对象时，相应的成员变量也将被初始化。如果类中没有明确定义构造方法，则编译器会自动创建一个不带参数的默认构造方法。</p><p>在定义构造方法时，还可以为其添加一个或者多个参数，即有参数的构造方法。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Book</span><span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token keyword">int</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token comment">//...</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>上面编写了简单的构造器，可以定义对象的初始状态。但是，由于对象构造非常重要，所以Java提供了多种编写构造器的机制。</p><h4 id="重载" tabindex="-1"><a class="header-anchor" href="#重载" aria-hidden="true">#</a> 重载</h4><p>有些类有多个构造器。例如可以构造一个空的StringBuilder对象</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">StringBuilder</span> messgers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SrtingBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>也可以指定一个初始字符串</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">StringBuilder</span> todoList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">&quot;To do:\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>这种特征叫做<code>重载（overloading）</code>。如果有多个方法（比如StringBuilder构造器方法）有相同的名字，不同的参数，便产生了重载。编译器必须挑选出执行哪一个方法，它通过用各个方法给出的参数类型与特定方法调用所使用的值类型进行匹配来挑选出相应的方法。如果编译器找不到匹配的参数，就会产生编译时错误，因为根本不存在匹配，或者没有一个比其他的更好。（这个过程被称为<code>重载解析（overloading resolution）</code>）</p><h4 id="默认域初始化" tabindex="-1"><a class="header-anchor" href="#默认域初始化" aria-hidden="true">#</a> 默认域初始化</h4><p>如果在构造器中没有显式的给域值赋予初值，那么就会被自动赋值为默认值；数值为0，布尔值为false，对象引用为null（可以参考<a href="#%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F">成员变量的默认值表</a> ）。非常不建议这样做。</p><h4 id="无参数构造器" tabindex="-1"><a class="header-anchor" href="#无参数构造器" aria-hidden="true">#</a> 无参数构造器</h4><p>很多类都包含一个无参数的构造函数，对象由无参数构造函数创建时，其状态会设置适当的默认值。例如，以下是Employee类的无参数构造函数</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    name <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>\n    salary <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    hireDay <span class="token operator">=</span> localDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>如果在编写一个类时没有编写构造器，那么系统会提供一个无参数构造器。这个构造器将所有实例域设置为默认值。于是，实例域中的数值型数据设置为0，布尔型数据设置为false，所有对象变量设置为null。</p><p>如果类中提供了至少一个构造器，但是没有提供无参数的构造器，则在构造对象时如果没有提供参数就会被视为不合法。</p><p><strong>注意</strong>仅当类没有提供任何构造器的时候，系统才会自动提供一个默认的构造器。</p><h4 id="显式域初始化" tabindex="-1"><a class="header-anchor" href="#显式域初始化" aria-hidden="true">#</a> 显式域初始化</h4><p>通过重载类的构造器方法，可以采用多种形式设置类的实例域的初始状态。确保不管怎么调用构造器，每个实例都可以被设置为一个有意义的初值，这是一个很好的设计习惯。</p><p>可以在类定义中，直接将一个值赋给任何域</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Employee</span><span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在执行构造器之前，先执行赋值操作。</p><p>初始值不一定是常量。在下面的例子中，可以调用方法对域进行初始化。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Employee</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> nextId<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token function">assignId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">assignId</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> r <span class="token operator">=</span> nextId<span class="token punctuation">;</span>\n        nextId<span class="token operator">++</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> r<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h4 id="调用另一个构造器" tabindex="-1"><a class="header-anchor" href="#调用另一个构造器" aria-hidden="true">#</a> 调用另一个构造器</h4><p>关键字<code>this</code>引用方法的隐式参数。然而这个关键字还有另一个含义。 如果构造器的第一个语句形如<code>this(...)</code>,这个构造器将调用同一个类的另一个构造器</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token keyword">double</span> s<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token string">&quot;Employee #&quot;</span> <span class="token operator">+</span> nextId<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    nextId<span class="token operator">++</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>当调用<code>new Employee(600000)</code>时，Employee(double) 构造器将调用<code>Employee(String, double)</code>构造器。采用这种方式使用this关键字非常有用，这样对公共的构造器代码部分只编写一次即可。</p><h4 id="初始代码块" tabindex="-1"><a class="header-anchor" href="#初始代码块" aria-hidden="true">#</a> 初始代码块</h4><p>前面已经讲过的初始化数据域的方法</p><ul><li>在构造器中设置值</li><li>在声明中赋值</li></ul><p>除了这两种，Java还有第三种机制，称为<code>初始化块（initializetion block）</code>。在类的声明中，可以包含多个代码块。只要构造类的对象，这些块就会被执行。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Employee</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> nextId<span class="token punctuation">;</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">double</span> salary<span class="token punctuation">;</span>\n\n    <span class="token comment">// 对象初始化块</span>\n    <span class="token punctuation">{</span>\n        id <span class="token operator">=</span> nextId<span class="token punctuation">;</span>\n        nextId <span class="token operator">++</span>；\n    <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token class-name">String</span> n<span class="token punctuation">,</span> <span class="token keyword">double</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        name <span class="token operator">=</span> n<span class="token punctuation">;</span>\n        salary <span class="token operator">=</span> s<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        name <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>\n        salary <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>在这个示例中，无论使用哪个构造对象，id域都在对象初始化块中被初始化。首先运行初始化块，然后才运行构造器的主体部分。</p><p>除了初始化块，在后面学会static静态后，还有一个静态的初始化块</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">static</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">// code.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>在类第一次加载的时候，将会进行静态域的初始化。与实例域一样，除非将它们显式的设置成其他值，否则默认的初始值是0，false或null。所有的静态初始化语句以及静态初始化块都将依照类的定义顺序执行。</p><p>示例代码</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConstructorTest</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Employee</span><span class="token punctuation">[</span><span class="token punctuation">]</span> staff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n        staff<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">&quot;Tom&quot;</span><span class="token punctuation">,</span><span class="token number">40000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        staff<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">60000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        staff<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Employee</span> e<span class="token operator">:</span> staff<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;name=&quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;, id=&quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;, salary=&quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Employee</span><span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> nextId<span class="token punctuation">;</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">double</span> salary<span class="token punctuation">;</span>\n\n    <span class="token comment">// static initialization block</span>\n    <span class="token keyword">static</span>\n    <span class="token punctuation">{</span>\n        <span class="token class-name">Random</span> generator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        nextId <span class="token operator">=</span> generator<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token punctuation">}</span>\n\n    <span class="token punctuation">{</span>\n        id <span class="token operator">=</span> nextId<span class="token punctuation">;</span>\n        nextId <span class="token operator">++</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token class-name">String</span> n<span class="token punctuation">,</span> <span class="token keyword">double</span> s<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        name <span class="token operator">=</span> n<span class="token punctuation">;</span>\n        salary <span class="token operator">=</span> s<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token keyword">double</span> s<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token string">&quot;Employee #&quot;</span> <span class="token operator">+</span> nextId<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> id<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> name<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> salary<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br></div></div><h3 id="局部变量" tabindex="-1"><a class="header-anchor" href="#局部变量" aria-hidden="true">#</a> 局部变量</h3><p>如果在成员方法内定义一个变量，那么这个变量被成为局部变量。</p><p>局部变量在方法被执行的时候创建，在方法执行结束时被销毁。局部变量在使用时必须进行赋值操作或被初始化，否则会出现编译错误。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;java&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> id<span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>如果将id这个局部变量的初始化去掉，编译器会报错。</p><h3 id="局部变量的有效范围" tabindex="-1"><a class="header-anchor" href="#局部变量的有效范围" aria-hidden="true">#</a> 局部变量的有效范围</h3><p>可以将局部变量的有效范围称为变量的作用域,局部变量的有效范围从该变量的声明开始到该变量的结束为止</p><h3 id="对象的创建" tabindex="-1"><a class="header-anchor" href="#对象的创建" aria-hidden="true">#</a> 对象的创建</h3><p>对象可以认为是在一类事务中抽象出某一个特例，可以通过这个特例来处理这类事物出现的问题。</p><p>在Java语言中通过<code>new</code>操作符来创建对象。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Test</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Test</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>Test：类名</li><li>test：创建Test类对象</li><li>new： 创建对象操作符</li><li>A： 构造方法的参数</li></ul><p>对象被创建出来的时，就是一个对象的引用，这个引用在内存中为对象分配了存储空间。每个对象都是相互独立的，在内存中占据独立的内存地址，并且每个对象都具有自己的生命周期，当一个对象的生命周期结束时，对象就变成垃圾，由Java虚拟机自带的垃圾回收机制处理,不能再被使用。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CreateObject</span><span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token class-name">CreateObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;创建对象&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">new</span> <span class="token class-name">CreateObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="访问对象的属性和行为" tabindex="-1"><a class="header-anchor" href="#访问对象的属性和行为" aria-hidden="true">#</a> 访问对象的属性和行为</h3><p>在使用<code>new</code>操作符创建对象以后，可以使用<code>对象.类成员</code>来获取对象的属性和行为。</p><h3 id="对象的销毁" tabindex="-1"><a class="header-anchor" href="#对象的销毁" aria-hidden="true">#</a> 对象的销毁</h3><p>每个对象都有生命周期，当对象的生命周期结束时，分配给该对象的内存地址会被回收。</p><p>何种对象会被Java虚拟机视为垃圾</p><ul><li>对象引用超过其作用范围，这个对象将被视为垃圾。</li><li>将对象复制为null</li></ul><p>虽然垃圾回收机制已经很完善，但垃圾回收器只能回收那些由new操作符创建的对象，如果某些对象不是通过new操作符在内存中获取一块内存区域，这种对象可能不能被垃圾回收机制所识别。</p><p>Java提供了System.gc()方法强制启动垃圾回收器。</p><h3 id="this关键字" tabindex="-1"><a class="header-anchor" href="#this关键字" aria-hidden="true">#</a> this关键字</h3><p>this可以调用成员变量和成员方法。this引用的就是本类的一个对象，在局部变量或方法参数覆盖了成员变量时，就要添加this关键字明确引用的是类成员还是局部变量或方法参数。</p><h2 id="_3-3-static-关键字" tabindex="-1"><a class="header-anchor" href="#_3-3-static-关键字" aria-hidden="true">#</a> 3.3 static 关键字</h2><p>有<code>static</code>修饰的变量、常量和方法被称作静态变量、静态常量和静态方法，也被成为类的静态成员。</p><p>它属于整个类所有，而不是某个对象所有，即被类的所有对象所共享。静态成员可以使用类名直接访问，也可以使用对象名进行访问。当然，鉴于他作用的特殊性更推荐用类名访问。</p><h3 id="静态变量" tabindex="-1"><a class="header-anchor" href="#静态变量" aria-hidden="true">#</a> 静态变量</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">{</span>\n    <span class="token keyword">static</span> <span class="token class-name">String</span> hobby <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token comment">// 静态变量可以直接使用类名类访问，无需创建类的对象</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;通过类名访问hobby： &quot;</span><span class="token operator">+</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">.</span>hobby<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 创建类的对象</span>\n        <span class="token class-name">HelloWorld</span> hello <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 通过对象名来访问静态变量</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;通过对象名访问hobby： &quot;</span><span class="token operator">+</span> hello<span class="token punctuation">.</span>hobby<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 使用对象名的形式修改静态变量的值</span>\n         hello<span class="token punctuation">.</span>hobby <span class="token operator">=</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;通过类名访问hobby： &quot;</span><span class="token operator">+</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">.</span>hobby<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>注意：</p><ol><li>同一个类的不同实例对象，共用同一个静态变量，如果一个类将其变更，另一个类的静态变量也会变更。</li><li>静态成员属于整个类，当系统第一次使用该类时，就会为其分配内存空间直到该类被卸载才会进行资源回收！</li></ol><h3 id="静态常量" tabindex="-1"><a class="header-anchor" href="#静态常量" aria-hidden="true">#</a> 静态常量</h3><p>用<code>final static</code>修饰一个成员变量，这个成员变量就会变成一个静态常量</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token constant">PI</span> <span class="token operator">=</span> <span class="token number">3.1415926</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>静态常量不可变，可以直接被访问，如<code>类名.静态常量名</code>。例如：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MathTest</span><span class="token punctuation">{</span>\n   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> <span class="token constant">PI</span><span class="token operator">=</span> <span class="token number">3.1415926</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>可以直接采用<code>MathTest.PI</code>的形式访问该PI常量。</p><p>给静态常量命名时所有字母都应该大写。</p><h3 id="静态方法" tabindex="-1"><a class="header-anchor" href="#静态方法" aria-hidden="true">#</a> 静态方法</h3><p>不需要创建对象，直接使用类来执行方法。<code>类名.静态方法()</code></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticMethod</span><span class="token punctuation">{</span>\n    <span class="token keyword">static</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;静态方法无需实例化就可以调用&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">StaticMethod</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="静态代码块" tabindex="-1"><a class="header-anchor" href="#静态代码块" aria-hidden="true">#</a> 静态代码块</h3><p>用static修饰代码区域可以称之为静态代码块。定义一块静态代码块，可以完成类的初始化操作。在声明时后就会运行</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticTest</span><span class="token punctuation">{</span>\n    <span class="token keyword">static</span> <span class="token punctuation">{</span>\n\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这里需要比较一下静态代码块<code>static{}</code>和代码块<code>{}</code>。参考<a href="#%E5%88%9D%E5%A7%8B%E4%BB%A3%E7%A0%81%E5%9D%97">初始代码块</a>。</p><h2 id="_3-4-类的主方法" tabindex="-1"><a class="header-anchor" href="#_3-4-类的主方法" aria-hidden="true">#</a> 3.4 类的主方法</h2><p>主方法是类的入口，它定义了程序从何处开始；主方法提供对程序的流向控制，Java编译器通过主方法来执行程序</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> agrs<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">// 方法体</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在主方法的定义中可以看到一下特性</p><ol><li>主方法是静态的，所有如要直接在主方法中调用其他方法，则该方法必须也是静态的。</li><li>主方法没有返回值。</li><li>主方法的形参为数组。其中args[0]~args[n]，分别代表程序的第1个参数到第n+1ge参数，可以使用args.length获取参数个数。</li></ol><p>mian方法不对任何对象进行操作。事实上，在启动程序时还没有任何对象。静态方法将执行并创建程序所需要的对象。</p><h2 id="_3-5-类设计技巧" tabindex="-1"><a class="header-anchor" href="#_3-5-类设计技巧" aria-hidden="true">#</a> 3.5 类设计技巧</h2><ul><li>一定要保证数据私有</li><li>一定要对数据初始化</li><li>不要在类中使用过的基本类型</li><li>不是所有的域都需要独立的域访问器和域修改器</li><li>将职责过多的类进行分解</li><li>类名和方法名要能够体现它们的职责</li><li>优先使用不可变的类</li></ul><h2 id="_3-6-包" tabindex="-1"><a class="header-anchor" href="#_3-6-包" aria-hidden="true">#</a> 3.6 包</h2><p>Java允许使用<code>包（package）</code>将类组织起来。借助于包可以方便的组织自己的代码，并将自己的代码与别人的代码库分开。</p><h3 id="类的导入" tabindex="-1"><a class="header-anchor" href="#类的导入" aria-hidden="true">#</a> 类的导入</h3><h4 id="在每个类名之前添加完整的包名" tabindex="-1"><a class="header-anchor" href="#在每个类名之前添加完整的包名" aria-hidden="true">#</a> 在每个类名之前添加完整的包名</h4><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span>LocalDate</span> today <span class="token operator">=</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>locakDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="使用import语句" tabindex="-1"><a class="header-anchor" href="#使用import语句" aria-hidden="true">#</a> 使用import语句</h4><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>不使用前缀还可以指定具体的导入类</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">LoacalDate</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="静态导入" tabindex="-1"><a class="header-anchor" href="#静态导入" aria-hidden="true">#</a> 静态导入</h3><p>import语句不仅可以导入类，还增加了导入静态方法和静态域的功能。 例如</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token operator">*</span></span><span class="token punctuation">;</span>\n<span class="token comment">// 就可以使用System类的静态方法和静态域，而不必加类名前缀</span>\nout<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// i.e., System.out</span>\n<span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// i.e., System.exit</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>另外，还可以导入特定的方法或域</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token static">out</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>不太建议这种简写形式，这种编写形式不利于代码的清晰度。</p><h3 id="将类放入包中" tabindex="-1"><a class="header-anchor" href="#将类放入包中" aria-hidden="true">#</a> 将类放入包中</h3><p>要想将一个类放入包中，就必须将包的名字放在源文件的开头，包中定义类的代码之前</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>exaple<span class="token punctuation">.</span>corejava</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span><span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="包作用域" tabindex="-1"><a class="header-anchor" href="#包作用域" aria-hidden="true">#</a> 包作用域</h3><p>暂略</p><h3 id="类路径" tabindex="-1"><a class="header-anchor" href="#类路径" aria-hidden="true">#</a> 类路径</h3><p>暂略</p>',178),e={},t=(0,a(3744).Z)(e,[["render",function(n,s){return p}]])}}]);