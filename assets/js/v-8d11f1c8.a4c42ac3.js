"use strict";(self.webpackChunklearning_docs_2_x=self.webpackChunklearning_docs_2_x||[]).push([[6469],{5456:(s,a,n)=>{n.r(a),n.d(a,{data:()=>e});const e={key:"v-8d11f1c8",path:"/python/python-basics/other.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:3,title:"跨平台编译",slug:"跨平台编译",children:[]}],filePathRelative:"python/python-basics/other.md",git:{updatedTime:1658130428e3,contributors:[{name:"wangming",email:"wangming@ttg.cn",commits:1}]}}},6179:(s,a,n)=>{n.r(a),n.d(a,{default:()=>p});const e=(0,n(6252).uE)('<h3 id="跨平台编译" tabindex="-1"><a class="header-anchor" href="#跨平台编译" aria-hidden="true">#</a> 跨平台编译</h3><p>默认我们<code>go build</code>的可执行文件都是当前操作系统可执行的文件，如果我想在windows下编译一个linux下可执行文件，那需要怎么做呢？</p><p>只需要指定目标操作系统的平台和处理器架构即可：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>SET <span class="token assign-left variable">CGO_ENABLED</span><span class="token operator">=</span><span class="token number">0</span>  // 禁用CGO\nSET <span class="token assign-left variable">GOOS</span><span class="token operator">=</span>linux  // 目标平台是linux\nSET <span class="token assign-left variable">GOARCH</span><span class="token operator">=</span>amd64  // 目标处理器架构是amd64\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><em>使用了cgo的代码是不支持跨平台编译的</em></p><p>然后再执行<code>go build</code>命令，得到的就是能够在Linux平台运行的可执行文件了。</p><p>Mac 下编译 Linux 和 Windows平台 64位 可执行程序：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token assign-left variable">CGO_ENABLED</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">GOOS</span><span class="token operator">=</span>linux <span class="token assign-left variable">GOARCH</span><span class="token operator">=</span>amd64 go build\n<span class="token assign-left variable">CGO_ENABLED</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">GOOS</span><span class="token operator">=</span>windows <span class="token assign-left variable">GOARCH</span><span class="token operator">=</span>amd64 go build\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Linux 下编译 Mac 和 Windows 平台64位可执行程序：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token assign-left variable">CGO_ENABLED</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">GOOS</span><span class="token operator">=</span>darwin <span class="token assign-left variable">GOARCH</span><span class="token operator">=</span>amd64 go build\n<span class="token assign-left variable">CGO_ENABLED</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">GOOS</span><span class="token operator">=</span>windows <span class="token assign-left variable">GOARCH</span><span class="token operator">=</span>amd64 go build\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Windows下编译Mac平台64位可执行程序：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>SET <span class="token assign-left variable">CGO_ENABLED</span><span class="token operator">=</span><span class="token number">0</span>\nSET <span class="token assign-left variable">GOOS</span><span class="token operator">=</span>darwin\nSET <span class="token assign-left variable">GOARCH</span><span class="token operator">=</span>amd64\ngo build\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',12),l={},p=(0,n(3744).Z)(l,[["render",function(s,a){return e}]])}}]);