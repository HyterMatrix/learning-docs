"use strict";(self.webpackChunklearning_docs_2_x=self.webpackChunklearning_docs_2_x||[]).push([[9391],{1762:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-3b0f657e",path:"/python/python-basics/03-operator.html",title:"第三章 运算符",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"1. 算术运算符",slug:"_1-算术运算符",children:[]},{level:2,title:"2. 比较运算符",slug:"_2-比较运算符",children:[]},{level:2,title:"3. 赋值运算符",slug:"_3-赋值运算符",children:[{level:3,title:"增量赋值",slug:"增量赋值",children:[]},{level:3,title:"链式赋值",slug:"链式赋值",children:[]},{level:3,title:"交叉赋值",slug:"交叉赋值",children:[]},{level:3,title:"解压赋值",slug:"解压赋值",children:[]}]},{level:2,title:"4. 逻辑运算符",slug:"_4-逻辑运算符",children:[{level:3,title:"连续多个and",slug:"连续多个and",children:[]},{level:3,title:"连续多个or",slug:"连续多个or",children:[]},{level:3,title:"优先级not>and>or",slug:"优先级not-and-or",children:[]}]},{level:2,title:"5. 成员运算符",slug:"_5-成员运算符",children:[]},{level:2,title:"6. 身份运算符",slug:"_6-身份运算符",children:[]}],filePathRelative:"python/python-basics/03-operator.md",git:{updatedTime:1658130428e3,contributors:[{name:"wangming",email:"wangming@ttg.cn",commits:1}]}}},5771:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h1 id="第三章-运算符" tabindex="-1"><a class="header-anchor" href="#第三章-运算符" aria-hidden="true">#</a> 第三章 运算符</h1><h2 id="_1-算术运算符" tabindex="-1"><a class="header-anchor" href="#_1-算术运算符" aria-hidden="true">#</a> 1. 算术运算符</h2><p>python支持的算数运算符与数学上计算的符号使用是一致的，我们以x=9，y=2为例来依次介绍它们</p><p><img src="image/202005101731.jpg" alt="img"></p><h2 id="_2-比较运算符" tabindex="-1"><a class="header-anchor" href="#_2-比较运算符" aria-hidden="true">#</a> 2. 比较运算符</h2><p>比较运算用来对两个值进行比较，返回的是布尔值True或False，我们以x=9，y=2为例来依次介绍它们</p><p><img src="image/202005101734.jpg" alt="img"></p><h2 id="_3-赋值运算符" tabindex="-1"><a class="header-anchor" href="#_3-赋值运算符" aria-hidden="true">#</a> 3. 赋值运算符</h2><p>python语法中除了有=号这种简单的赋值运算外，还支持增量赋值、链式赋值、交叉赋值、解压赋值，这些赋值运算符存在的意义都是为了让我们的代码看起来更加精简。我们以x=9，y=2为例先来介绍一下增量赋值</p><h3 id="增量赋值" tabindex="-1"><a class="header-anchor" href="#增量赋值" aria-hidden="true">#</a> 增量赋值</h3><p><img src="image/202005101735.jpg" alt="img"></p><h3 id="链式赋值" tabindex="-1"><a class="header-anchor" href="#链式赋值" aria-hidden="true">#</a> 链式赋值</h3><p>如果我们想把同一个值同时赋值给多个变量名，可以这么做</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> z<span class="token operator">=</span><span class="token number">10</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> y<span class="token operator">=</span>z\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x<span class="token operator">=</span>y\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z\n<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>链式赋值指的是可以用一行代码搞定这件事</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x<span class="token operator">=</span>y<span class="token operator">=</span>z<span class="token operator">=</span><span class="token number">10</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z\n<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="交叉赋值" tabindex="-1"><a class="header-anchor" href="#交叉赋值" aria-hidden="true">#</a> 交叉赋值</h3><p>我们定义两个变量m与n</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m<span class="token operator">=</span><span class="token number">10</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> n<span class="token operator">=</span><span class="token number">20</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>如果我们想将m与n的值交换过来，可以这么做</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> temp<span class="token operator">=</span>m\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m<span class="token operator">=</span>n\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> n<span class="token operator">=</span>temp\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m<span class="token punctuation">,</span>n\n<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>交叉赋值指的是一行代码可以搞定这件事</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m<span class="token operator">=</span><span class="token number">10</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> n<span class="token operator">=</span><span class="token number">20</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m<span class="token punctuation">,</span>n<span class="token operator">=</span>n<span class="token punctuation">,</span>m <span class="token comment"># 交叉赋值</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m<span class="token punctuation">,</span>n\n<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="解压赋值" tabindex="-1"><a class="header-anchor" href="#解压赋值" aria-hidden="true">#</a> 解压赋值</h3><p>如果我们想把列表中的多个值取出来依次赋值给多个变量名，可以这么做</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> nums<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">]</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> \n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token operator">=</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b<span class="token operator">=</span>nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c<span class="token operator">=</span>nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> d<span class="token operator">=</span>nums<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> e<span class="token operator">=</span>nums<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>e\n<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>解压赋值指的是一行代码可以搞定这件事</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>e<span class="token operator">=</span>nums <span class="token comment"># nums包含多个值，就好比一个压缩包，解压赋值因此得名</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>e\n<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>注意，上述解压赋值，等号左边的变量名个数必须与右面包含值的个数相同,否则会报错</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment">#1、变量名少了</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">,</span>b<span class="token operator">=</span>nums\nTraceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>\n  File <span class="token string">&quot;&lt;stdin&gt;&quot;</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>\nValueError<span class="token punctuation">:</span> too many values to unpack <span class="token punctuation">(</span>expected <span class="token number">2</span><span class="token punctuation">)</span>\n\n<span class="token comment">#2、变量名多了</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>e<span class="token punctuation">,</span>f<span class="token operator">=</span>nums\nTraceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>\n  File <span class="token string">&quot;&lt;stdin&gt;&quot;</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>\nValueError<span class="token punctuation">:</span> <span class="token keyword">not</span> enough values to unpack <span class="token punctuation">(</span>expected <span class="token number">6</span><span class="token punctuation">,</span> got <span class="token number">5</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>但如果我们只想取头尾的几个值，可以用*_匹配</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span><span class="token operator">*</span>_<span class="token operator">=</span>nums\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">,</span>b\n<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>ps：字符串、字典、元组、集合类型都支持解压赋值</p><h2 id="_4-逻辑运算符" tabindex="-1"><a class="header-anchor" href="#_4-逻辑运算符" aria-hidden="true">#</a> 4. 逻辑运算符</h2><p>逻辑运算符用于连接多个条件，进行关联判断，会返回布尔值True或False</p><p><img src="image/202005101736.jpg" alt="img"></p><h3 id="连续多个and" tabindex="-1"><a class="header-anchor" href="#连续多个and" aria-hidden="true">#</a> 连续多个and</h3><p>可以用and连接多个条件，会按照从左到右的顺序依次判断，一旦某一个条件为False，则无需再往右判断，可以立即判定最终结果就为False，只有在所有条件的结果都为True的情况下，最终结果才为True。</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token keyword">and</span> <span class="token number">1</span> <span class="token operator">!=</span> <span class="token number">1</span> <span class="token keyword">and</span> <span class="token boolean">True</span> <span class="token keyword">and</span> <span class="token number">3</span> <span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token comment"># 判断完第二个条件，就立即结束，得的最终结果为False</span>\n<span class="token boolean">False</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="连续多个or" tabindex="-1"><a class="header-anchor" href="#连续多个or" aria-hidden="true">#</a> 连续多个or</h3><p>可以用or连接多个条件，会按照从左到右的顺序依次判断，一旦某一个条件为True，则无需再往右判断，可以立即判定最终结果就为True，只有在所有条件的结果都为False的情况下，最终结果才为False</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token keyword">or</span> <span class="token number">1</span> <span class="token operator">!=</span> <span class="token number">1</span> <span class="token keyword">or</span> <span class="token boolean">True</span> <span class="token keyword">or</span> <span class="token number">3</span> <span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token comment"># 判断完第一个条件，就立即结束，得的最终结果为True</span>\n<span class="token boolean">True</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="优先级not-and-or" tabindex="-1"><a class="header-anchor" href="#优先级not-and-or" aria-hidden="true">#</a> 优先级not&gt;and&gt;or</h3><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment">#1、三者的优先级关系：not&gt;and&gt;or，同一优先级默认从左往右计算。</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">3</span><span class="token operator">&gt;</span><span class="token number">4</span> <span class="token keyword">and</span> <span class="token number">4</span><span class="token operator">&gt;</span><span class="token number">3</span> <span class="token keyword">or</span> <span class="token number">1</span><span class="token operator">==</span><span class="token number">3</span> <span class="token keyword">and</span> <span class="token string">&#39;x&#39;</span> <span class="token operator">==</span> <span class="token string">&#39;x&#39;</span> <span class="token keyword">or</span> <span class="token number">3</span> <span class="token operator">&gt;</span><span class="token number">3</span>\n<span class="token boolean">False</span>\n\n<span class="token comment">#2、最好使用括号来区别优先级，其实意义与上面的一样</span>\n<span class="token triple-quoted-string string">&#39;&#39;&#39;\n原理为：\n(1) not的优先级最高，就是把紧跟其后的那个条件结果取反，所以not与紧跟其后的条件不可分割\n\n(2) 如果语句中全部是用and连接，或者全部用or连接，那么按照从左到右的顺序依次计算即可\n\n(3) 如果语句中既有and也有or，那么先用括号把and的左右两个条件给括起来，然后再进行运算\n&#39;&#39;&#39;</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">&gt;</span><span class="token number">4</span> <span class="token keyword">and</span> <span class="token number">4</span><span class="token operator">&gt;</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">==</span><span class="token number">3</span> <span class="token keyword">and</span> <span class="token string">&#39;x&#39;</span> <span class="token operator">==</span> <span class="token string">&#39;x&#39;</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token number">3</span> <span class="token operator">&gt;</span><span class="token number">3</span>\n<span class="token boolean">False</span> \n\n<span class="token comment">#3、短路运算：逻辑运算的结果一旦可以确定，那么就以当前处计算到的值作为最终结果返回</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">10</span> <span class="token keyword">and</span> <span class="token number">0</span> <span class="token keyword">or</span> <span class="token string">&#39;&#39;</span> <span class="token keyword">and</span> <span class="token number">0</span> <span class="token keyword">or</span> <span class="token string">&#39;abc&#39;</span> <span class="token keyword">or</span> <span class="token string">&#39;egon&#39;</span> <span class="token operator">==</span> <span class="token string">&#39;dsb&#39;</span> <span class="token keyword">and</span> <span class="token number">333</span> <span class="token keyword">or</span> <span class="token number">10</span> <span class="token operator">&gt;</span> <span class="token number">4</span>\n我们用括号来明确一下优先级\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token number">10</span> <span class="token keyword">and</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span><span class="token string">&#39;&#39;</span> <span class="token keyword">and</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token string">&#39;abc&#39;</span> <span class="token keyword">or</span> <span class="token punctuation">(</span><span class="token string">&#39;egon&#39;</span> <span class="token operator">==</span> <span class="token string">&#39;dsb&#39;</span> <span class="token keyword">and</span> <span class="token number">333</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token number">10</span> <span class="token operator">&gt;</span> <span class="token number">4</span>\n短路：       <span class="token number">0</span>      <span class="token string">&#39;&#39;</span>            <span class="token string">&#39;abc&#39;</span>                    \n            假     假              真\n\n返回：                            <span class="token string">&#39;abc&#39;</span>\n\n<span class="token comment">#4、短路运算面试题：</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token keyword">or</span> <span class="token number">3</span>\n<span class="token number">1</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token keyword">and</span> <span class="token number">3</span>\n<span class="token number">3</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">and</span> <span class="token number">2</span> <span class="token keyword">and</span> <span class="token number">1</span>\n<span class="token number">0</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">and</span> <span class="token number">2</span> <span class="token keyword">or</span> <span class="token number">1</span>\n<span class="token number">1</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">and</span> <span class="token number">2</span> <span class="token keyword">or</span> <span class="token number">1</span> <span class="token keyword">or</span> <span class="token number">4</span>\n<span class="token number">1</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">or</span> <span class="token boolean">False</span> <span class="token keyword">and</span> <span class="token number">1</span>\n<span class="token boolean">False</span> \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><h2 id="_5-成员运算符" tabindex="-1"><a class="header-anchor" href="#_5-成员运算符" aria-hidden="true">#</a> 5. 成员运算符</h2><p><img src="image/202005101737.jpg" alt="img"></p><p>注意：虽然下述两种判断可以达到相同的效果，但我们推荐使用第二种格式，因为not in语义更加明确</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">not</span> <span class="token string">&#39;lili&#39;</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">&#39;jack&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;robin&#39;</span><span class="token punctuation">]</span>\n<span class="token boolean">True</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">&#39;lili&#39;</span> <span class="token keyword">not</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">&#39;jack&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;robin&#39;</span><span class="token punctuation">]</span>\n<span class="token boolean">True</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="_6-身份运算符" tabindex="-1"><a class="header-anchor" href="#_6-身份运算符" aria-hidden="true">#</a> 6. 身份运算符</h2><p><img src="image/202005101738.jpg" alt="img"></p><p>需要强调的是：==双等号比较的是value是否相等，而is比较的是id是否相等</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment">#1. id相同，内存地址必定相同，意味着type和value必定相同</span>\n<span class="token comment">#2. value相同type肯定相同，但id可能不同,如下</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x<span class="token operator">=</span><span class="token string">&#39;Info Tony:18&#39;</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> y<span class="token operator">=</span><span class="token string">&#39;Info Tony:18&#39;</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">id</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">id</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token comment"># x与y的id不同，但是二者的值相同</span>\n<span class="token punctuation">(</span><span class="token number">4327422640</span><span class="token punctuation">,</span> <span class="token number">4327422256</span><span class="token punctuation">)</span>\n\n\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x <span class="token operator">==</span> y <span class="token comment"># 等号比较的是value</span>\n<span class="token boolean">True</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">type</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token comment"># 值相同type肯定相同</span>\n<span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;str&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;str&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">)</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x <span class="token keyword">is</span> y <span class="token comment"># is比较的是id，x与y的值相等但id可以不同</span>\n<span class="token boolean">False</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div>',52),e={},t=(0,a(3744).Z)(e,[["render",function(n,s){return p}]])}}]);