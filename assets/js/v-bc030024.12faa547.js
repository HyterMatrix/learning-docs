"use strict";(self.webpackChunklearning_docs_2_x=self.webpackChunklearning_docs_2_x||[]).push([[6362],{9805:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-bc030024",path:"/python/django-2.x/01-intro.html",title:"一个简单的Django应用",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"创建项目",slug:"创建项目",children:[]},{level:2,title:"用于开发的简易服务器",slug:"用于开发的简易服务器",children:[]},{level:2,title:"创建投票应用",slug:"创建投票应用",children:[]},{level:2,title:"编写第一个视图",slug:"编写第一个视图",children:[{level:3,title:"path() 参数： route",slug:"path-参数-route",children:[]},{level:3,title:"path() 参数： view",slug:"path-参数-view",children:[]},{level:3,title:"path() 参数： kwargs",slug:"path-参数-kwargs",children:[]},{level:3,title:"path() 参数： name",slug:"path-参数-name",children:[]}]},{level:2,title:"数据库配置",slug:"数据库配置",children:[]}],filePathRelative:"python/django-2.x/01-intro.md",git:{updatedTime:1658130428e3,contributors:[{name:"wangming",email:"wangming@ttg.cn",commits:1}]}}},8898:(n,s,a)=>{a.r(s),a.d(s,{default:()=>l});const e=(0,a(6252).uE)('<h1 id="一个简单的django应用" tabindex="-1"><a class="header-anchor" href="#一个简单的django应用" aria-hidden="true">#</a> 一个简单的Django应用</h1><p>让我们通过示例来学习。</p><p>通过这个教程，我们将带着你创建一个基本的投票应用程序。</p><p>它将由两部分组成：</p><ul><li>一个让人们查看和投票的公共站点。</li><li>一个让你能添加、修改和删除投票的管理站点。</li></ul><h2 id="创建项目" tabindex="-1"><a class="header-anchor" href="#创建项目" aria-hidden="true">#</a> 创建项目</h2><p>如果这是你第一次使用 Django 的话，你需要一些初始化设置。也就是说，你需要用一些自动生成的代码配置一个 Django project —— 即一个 Django 项目实例需要的设置项集合，包括数据库配置、Django 配置和应用程序配置。</p><p>打开命令行，cd 到一个你想放置你代码的目录，然后运行以下命令：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>django-admin startproject mysite\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>这行代码将会在当前目录下创建一个 mysite 目录。</p><p>让我们看看 startproject 创建了些什么:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>mysite/\n    manage.py\n    mysite/\n        __init__.py\n        settings.py\n        urls.py\n        wsgi.py\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>这些目录和文件的用处是：</p><ul><li>最外层的 mysite/ 根目录只是你项目的容器， Django 不关心它的名字，你可以将它重命名为任何你喜欢的名字。</li><li>manage.py: 一个让你用各种方式管理 Django 项目的命令行工具。</li><li>里面一层的 mysite/ 目录包含你的项目，它是一个纯 Python 包。它的名字就是当你引用它内部任何东西时需要用到的 Python 包名。 (比如 mysite.urls).</li><li>mysite/<strong>init</strong>.py：一个空文件，告诉 Python 这个目录应该被认为是一个 Python 包。</li><li>mysite/settings.py：Django 项目的配置文件。</li><li>mysite/urls.py：Django 项目的 URL 声明，就像你网站的“目录”。</li><li>mysite/wsgi.py：作为你的项目的运行在 WSGI 兼容的Web服务器上的入口。</li></ul><h2 id="用于开发的简易服务器" tabindex="-1"><a class="header-anchor" href="#用于开发的简易服务器" aria-hidden="true">#</a> 用于开发的简易服务器</h2><p>让我们来确认一下你的 Django 项目是否真的创建成功了。如果你的当前目录不是外层的 mysite 目录的话，请切换到此目录，然后运行下面的命令：</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>python manage<span class="token punctuation">.</span>py runserver\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>你应该会看到如下输出：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>Watching <span class="token keyword">for</span> <span class="token function">file</span> changes with StatReloader\nPerforming system checks<span class="token punctuation">..</span>.\n\nSystem check identified no issues <span class="token punctuation">(</span><span class="token number">0</span> silenced<span class="token punctuation">)</span>.\nJuly <span class="token number">17</span>, <span class="token number">2019</span> - <span class="token number">16</span>:44:00\nDjango version <span class="token number">2.2</span>.3, using settings <span class="token string">&#39;mysite.settings&#39;</span>\nStarting development server at http://127.0.0.1:8000/\nQuit the server with CONTROL-C.\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>如果你需要更换端口</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>python manage.py runserver <span class="token number">8080</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="创建投票应用" tabindex="-1"><a class="header-anchor" href="#创建投票应用" aria-hidden="true">#</a> 创建投票应用</h2><p>现在你的开发环境——这个“项目” ——已经配置好了，你可以开始干活了。</p><p>在 Django 中，每一个应用都是一个 Python 包，并且遵循着相同的约定。Django 自带一个工具，可以帮你生成应用的基础目录结构，这样你就能专心写代码，而不是创建目录了。</p><div class="custom-container tip"><p class="custom-container-title">项目 VS 应用</p><p>项目和应用有啥区别？应用是一个专门做某件事的网络应用程序——比如博客系统，或者公共记录的数据库，或者简单的投票程序。项目则是一个网站使用的配置和应用的集合。项目可以包含很多个应用。应用可以被很多个项目使用。</p></div><p>你的应用可以存放在任何 Python path 中定义的路径。在这个教程中，我们将在你的 manage.py 同级目录下创建投票应用。这样它就可以作为顶级模块导入，而不是 mysite 的子模块。</p><p>请确定你现在处于 manage.py 所在的目录下，然后运行这行命令来创建一个应用：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>python manage.py startapp polls\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>这将会创建一个 polls 目录，它的目录结构大致如下：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>polls/\n    __init__.py\n    admin.py\n    apps.py\n    migrations/\n        __init__.py\n    models.py\n    tests.py\n    views.py\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>这个目录结构包括了投票应用的全部内容。</p><h2 id="编写第一个视图" tabindex="-1"><a class="header-anchor" href="#编写第一个视图" aria-hidden="true">#</a> 编写第一个视图</h2><p>打开 polls/views.py，把下面这些 Python 代码输入进去：</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse\n\n\n<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">&quot;Hello, world. You&#39;re at the polls index.&quot;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这是 Django 中最简单的视图。如果想看见效果，我们需要将一个 URL 映射到它——这就是我们需要 URLconf 的原因了。</p><p>为了创建 URLconf，请在 polls 目录里新建一个 urls.py 文件。你的应用目录现在看起来应该是这样：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>polls/\n    __init__.py\n    admin.py\n    apps.py\n    migrations/\n        __init__.py\n    models.py\n    tests.py\n    urls.py\n    views.py\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>在 polls/urls.py 中，输入如下代码：</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path\n\n<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> views\n\nurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>\n    path<span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>index<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&#39;index&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>下一步是要在根 URLconf 文件中指定我们创建的 polls.urls 模块。在 mysite/urls.py 文件的 urlpatterns 列表里插入一个 include()， 如下：</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin\n<span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> include<span class="token punctuation">,</span> path\n\nurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>\n    path<span class="token punctuation">(</span><span class="token string">&#39;polls/&#39;</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">&#39;polls.urls&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    path<span class="token punctuation">(</span><span class="token string">&#39;admin/&#39;</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>函数 include() 允许引用其它 URLconfs。每当 Django 遇到 include() 时，它会截断与此项匹配的 URL 的部分，并将剩余的字符串发送到 URLconf 以供进一步处理。</p><p>你现在把 index 视图添加进了 URLconf。通过以下命令验证是否正常工作：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>python manage.py runserver\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>用你的浏览器访问 http://localhost:8000/polls/，你应该能够看见 &quot;Hello, world. You&#39;re at the polls index.&quot; ，这是你在 index 视图中定义的.</p><p>函数 path() 具有四个参数，两个必须参数：route 和 view，两个可选参数：kwargs 和 name。现在，是时候来研究这些参数的含义了。</p><h3 id="path-参数-route" tabindex="-1"><a class="header-anchor" href="#path-参数-route" aria-hidden="true">#</a> path() 参数： route</h3><p>route 是一个匹配 URL 的准则（类似正则表达式）。当 Django 响应一个请求时，它会从 urlpatterns 的第一项开始，按顺序依次匹配列表中的项，直到找到匹配的项。</p><p>这些准则不会匹配 GET 和 POST 参数或域名。例如，URLconf 在处理请求 https://www.example.com/myapp/ 时，它会尝试匹配 myapp/ 。处理请求 https://www.example.com/myapp/?page=3 时，也只会尝试匹配 myapp/。</p><h3 id="path-参数-view" tabindex="-1"><a class="header-anchor" href="#path-参数-view" aria-hidden="true">#</a> path() 参数： view</h3><p>当 Django 找到了一个匹配的准则，就会调用这个特定的视图函数，并传入一个 HttpRequest 对象作为第一个参数，被“捕获”的参数以关键字参数的形式传入。稍后，我们会给出一个例子。</p><h3 id="path-参数-kwargs" tabindex="-1"><a class="header-anchor" href="#path-参数-kwargs" aria-hidden="true">#</a> path() 参数： kwargs</h3><p>任意个关键字参数可以作为一个字典传递给目标视图函数。</p><h3 id="path-参数-name" tabindex="-1"><a class="header-anchor" href="#path-参数-name" aria-hidden="true">#</a> path() 参数： name</h3><p>为你的 URL 取名能使你在 Django 的任意地方唯一地引用它，尤其是在模板中。这个有用的特性允许你只改一个文件就能全局地修改某个 URL 模式。</p><h2 id="数据库配置" tabindex="-1"><a class="header-anchor" href="#数据库配置" aria-hidden="true">#</a> 数据库配置</h2><p>现在，打开 mysite/settings.py 。这是个包含了 Django 项目设置的 Python 模块。</p><p>通常，这个配置文件使用 SQLite 作为默认数据库。如果你不熟悉数据库，或者只是想尝试下 Django，这是最简单的选择。Python 内置 SQLite，所以你无需安装额外东西来使用它。当你开始一个真正的项目时，你可能更倾向使用一个更具扩展性的数据库，例如 PostgreSQL，避免中途切换数据库这个令人头疼的问题。</p><p>如果你想使用其他数据库，你需要安装合适的 database bindings ，然后改变设置文件中 DATABASES &#39;default&#39; 项目中的一些键值：</p><ul><li>ENGINE -- 可选值有 &#39;django.db.backends.sqlite3&#39;，&#39;django.db.backends.postgresql&#39;，&#39;django.db.backends.mysql&#39;，或 &#39;django.db.backends.oracle&#39;。其它 可用后端。</li><li>NAME - 数据库的名称。如果使用的是 SQLite，数据库将是你电脑上的一个文件，在这种情况下， NAME 应该是此文件的绝对路径，包括文件名。默认值 os.path.join(BASE_DIR, &#39;db.sqlite3&#39;) 将会把数据库文件储存在项目的根目录。 如果你不使用 SQLite，则必须添加一些额外设置，比如 USER 、 PASSWORD 、 HOST 等等。</li></ul><p>编辑 mysite/settings.py 文件前，先设置 TIME_ZONE 为你自己时区。</p><p>此外，关注一下文件头部的 INSTALLED_APPS 设置项。这里包括了会在你项目中启用的所有 Django 应用。应用能在多个项目中使用，你也可以打包并且发布应用，让别人使用它们。</p><p>通常， INSTALLED_APPS 默认包括了以下 Django 的自带应用：</p><p>django.contrib.admin -- 管理员站点， 你很快就会使用它。 django.contrib.auth -- 认证授权系统。 django.contrib.contenttypes -- 内容类型框架。 django.contrib.sessions -- 会话框架。 django.contrib.messages -- 消息框架。 django.contrib.staticfiles -- 管理静态文件的框架。 这些应用被默认启用是为了给常规项目提供方便。</p><p>默认开启的某些应用需要至少一个数据表，所以，在使用他们之前需要在数据库中创建一些表。请执行以下命令：</p>',65),p={},l=(0,a(3744).Z)(p,[["render",function(n,s){return e}]])}}]);