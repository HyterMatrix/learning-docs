"use strict";(self.webpackChunklearning_docs_2_x=self.webpackChunklearning_docs_2_x||[]).push([[1961],{2473:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-7389bce6",path:"/python/python-zhuanti/01-asyncio.html",title:"协程 & asyncio & 异步编程",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"1. 协程",slug:"_1-协程",children:[{level:3,title:"1.1 greenlet实现协程",slug:"_1-1-greenlet实现协程",children:[]},{level:3,title:"1.2 yield关键字",slug:"_1-2-yield关键字",children:[]},{level:3,title:"1.3 asyncio",slug:"_1-3-asyncio",children:[]},{level:3,title:"1.4 async & await关键字",slug:"_1-4-async-await关键字",children:[]}]},{level:2,title:"2.协程意义",slug:"_2-协程意义",children:[]},{level:2,title:"3.异步编程",slug:"_3-异步编程",children:[{level:3,title:"3.1 事件循环",slug:"_3-1-事件循环",children:[]},{level:3,title:"3.2 快速上手",slug:"_3-2-快速上手",children:[]},{level:3,title:"3.3 await",slug:"_3-3-await",children:[]},{level:3,title:"3.4 Task对象",slug:"_3-4-task对象",children:[]},{level:3,title:"3.5 asyncio.Future对象",slug:"_3-5-asyncio-future对象",children:[]},{level:3,title:"3.5 concurrent.futures.Future对象",slug:"_3-5-concurrent-futures-future对象",children:[]},{level:3,title:"3.7 异步迭代器",slug:"_3-7-异步迭代器",children:[]},{level:3,title:"3.8 异步上下文管理器",slug:"_3-8-异步上下文管理器",children:[]}]},{level:2,title:"4.uvloop",slug:"_4-uvloop",children:[]},{level:2,title:"5.实战案例",slug:"_5-实战案例",children:[{level:3,title:"5.1 异步redis",slug:"_5-1-异步redis",children:[]},{level:3,title:"5.2 异步MySQL",slug:"_5-2-异步mysql",children:[]},{level:3,title:"5.3 FastAPI框架",slug:"_5-3-fastapi框架",children:[]},{level:3,title:"5.4 爬虫",slug:"_5-4-爬虫",children:[]}]},{level:2,title:"总结",slug:"总结",children:[]}],filePathRelative:"python/python-zhuanti/01-asyncio.md",git:{updatedTime:1658130428e3,contributors:[{name:"wangming",email:"wangming@ttg.cn",commits:1}]}}},103:(n,s,a)=>{a.r(s),a.d(s,{default:()=>N});var p=a(6252);const e=(0,p.uE)('<h1 id="协程-asyncio-异步编程" tabindex="-1"><a class="header-anchor" href="#协程-asyncio-异步编程" aria-hidden="true">#</a> 协程 &amp; asyncio &amp; 异步编程</h1><h2 id="_1-协程" tabindex="-1"><a class="header-anchor" href="#_1-协程" aria-hidden="true">#</a> 1. 协程</h2><p>协程不是计算机提供的，程序员人为创造的。</p><p>协程（Coroutine），也可以被称为微线程，是一种用户态内的上下文切换技术。简而言之，其实就是通过一个线程实现代码块相互切换执行。例如：</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n\t<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n\t<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n\t\n<span class="token keyword">def</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n\t<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n\t<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>\n\nfunc1<span class="token punctuation">(</span><span class="token punctuation">)</span>\nfunc2<span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>实现协程有这么几种方法：</p><ul><li>greenlet，早期模块。</li><li>yield关键字。</li><li>asyncio装饰器（py3.4）</li><li>async、await关键字（py3.5)【推荐】</li></ul><h3 id="_1-1-greenlet实现协程" tabindex="-1"><a class="header-anchor" href="#_1-1-greenlet实现协程" aria-hidden="true">#</a> 1.1 greenlet实现协程</h3><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>pip3 install greenlet\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">from</span> greenlet <span class="token keyword">import</span> greenlet\n\n\n<span class="token keyword">def</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment"># 第1步：输出 1</span>\n    gr2<span class="token punctuation">.</span>switch<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 第3步：切换到 func2 函数</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token comment"># 第6步：输出 2</span>\n    gr2<span class="token punctuation">.</span>switch<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 第7步：切换到 func2 函数，从上一次执行的位置继续向后执行</span>\n\n\n<span class="token keyword">def</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>        <span class="token comment"># 第4步：输出 3</span>\n    gr1<span class="token punctuation">.</span>switch<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 第5步：切换到 func1 函数，从上一次执行的位置继续向后执行</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>        <span class="token comment"># 第8步：输出 4</span>\n\n\ngr1 <span class="token operator">=</span> greenlet<span class="token punctuation">(</span>func1<span class="token punctuation">)</span>\ngr2 <span class="token operator">=</span> greenlet<span class="token punctuation">(</span>func2<span class="token punctuation">)</span>\n\ngr1<span class="token punctuation">.</span>switch<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 第1步：去执行 func1 函数</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h3 id="_1-2-yield关键字" tabindex="-1"><a class="header-anchor" href="#_1-2-yield关键字" aria-hidden="true">#</a> 1.2 yield关键字</h3><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">yield</span> <span class="token number">1</span>\n    <span class="token keyword">yield</span> <span class="token keyword">from</span> func2<span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">yield</span> <span class="token number">2</span>\n\n\n<span class="token keyword">def</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">yield</span> <span class="token number">3</span>\n    <span class="token keyword">yield</span> <span class="token number">4</span>\n\n\nf1 <span class="token operator">=</span> func1<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">for</span> item <span class="token keyword">in</span> f1<span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="_1-3-asyncio" tabindex="-1"><a class="header-anchor" href="#_1-3-asyncio" aria-hidden="true">#</a> 1.3 asyncio</h3><p>在python3.4及之后的版本。</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">import</span> asyncio\n\n<span class="token decorator annotation punctuation">@asyncio<span class="token punctuation">.</span>coroutine</span>\n<span class="token keyword">def</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token comment"># 网络IO请求：下载一张图片</span>\n    <span class="token keyword">yield</span> <span class="token keyword">from</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># 遇到IO耗时操作，自动化切换到tasks中的其他任务</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n\n\n<span class="token decorator annotation punctuation">@asyncio<span class="token punctuation">.</span>coroutine</span>\n<span class="token keyword">def</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>\n    <span class="token comment"># 网络IO请求：下载一张图片</span>\n    <span class="token keyword">yield</span> <span class="token keyword">from</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment"># 遇到IO耗时操作，自动化切换到tasks中的其他任务</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>\n\n\ntasks <span class="token operator">=</span> <span class="token punctuation">[</span>\n    asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span> func1<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span> func2<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>\n<span class="token punctuation">]</span>\n\nloop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>\nloop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>注意：遇到IO阻塞自动切换</p><h3 id="_1-4-async-await关键字" tabindex="-1"><a class="header-anchor" href="#_1-4-async-await关键字" aria-hidden="true">#</a> 1.4 async &amp; await关键字</h3><p>在python3.5及之后的版本。</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">import</span> asyncio\n\n<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token comment"># 网络IO请求：下载一张图片</span>\n    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># 遇到IO耗时操作，自动化切换到tasks中的其他任务</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n\n\n<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>\n    <span class="token comment"># 网络IO请求：下载一张图片</span>\n    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment"># 遇到IO耗时操作，自动化切换到tasks中的其他任务</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>\n\n\ntasks <span class="token operator">=</span> <span class="token punctuation">[</span>\n    asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span> func1<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span> func2<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>\n<span class="token punctuation">]</span>\n\nloop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>\nloop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h2 id="_2-协程意义" tabindex="-1"><a class="header-anchor" href="#_2-协程意义" aria-hidden="true">#</a> 2.协程意义</h2><p>在一个线程中如果遇到IO等待时间，线程不会傻傻等，利用空闲的时候再去干点其他事。</p><p>案例：去下载三张图片（网络IO）。</p><ul><li><p>普通方式（同步）</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token triple-quoted-string string">&quot;&quot;&quot; pip3 install requests &quot;&quot;&quot;</span>\n\n<span class="token keyword">import</span> requests\n\n\n<span class="token keyword">def</span> <span class="token function">download_image</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;开始下载:&quot;</span><span class="token punctuation">,</span>url<span class="token punctuation">)</span>\n    <span class="token comment"># 发送网络请求，下载图片</span>\n    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;下载完成&quot;</span><span class="token punctuation">)</span>\n    <span class="token comment"># 图片保存到本地文件</span>\n    file_name <span class="token operator">=</span> url<span class="token punctuation">.</span>rsplit<span class="token punctuation">(</span><span class="token string">&#39;_&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>\n    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>file_name<span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file_object<span class="token punctuation">:</span>\n      file_object<span class="token punctuation">.</span>write<span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span>\n\n\n<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>\n    url_list <span class="token operator">=</span> <span class="token punctuation">[</span>\n        <span class="token string">&#39;https://www3.autoimg.cn/newsdfs/g26/M02/35/A9/120x90_0_autohomecar__ChsEe12AXQ6AOOH_AAFocMs8nzU621.jpg&#39;</span><span class="token punctuation">,</span>\n        <span class="token string">&#39;https://www2.autoimg.cn/newsdfs/g30/M01/3C/E2/120x90_0_autohomecar__ChcCSV2BBICAUntfAADjJFd6800429.jpg&#39;</span><span class="token punctuation">,</span>\n        <span class="token string">&#39;https://www3.autoimg.cn/newsdfs/g26/M0B/3C/65/120x90_0_autohomecar__ChcCP12BFCmAIO83AAGq7vK0sGY193.jpg&#39;</span>\n    <span class="token punctuation">]</span>\n    <span class="token keyword">for</span> item <span class="token keyword">in</span> url_list<span class="token punctuation">:</span>\n        download_image<span class="token punctuation">(</span>item<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div></li><li><p>协程方式（异步）</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token triple-quoted-string string">&quot;&quot;&quot;\n下载图片使用第三方模块aiohttp，请提前安装：pip3 install aiohttp\n&quot;&quot;&quot;</span>\n<span class="token comment">#!/usr/bin/env python</span>\n<span class="token comment"># -*- coding:utf-8 -*-</span>\n<span class="token keyword">import</span> aiohttp\n<span class="token keyword">import</span> asyncio\n\n\n<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">fetch</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;发送请求：&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>\n    <span class="token keyword">async</span> <span class="token keyword">with</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> verify_ssl<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token keyword">as</span> response<span class="token punctuation">:</span>\n        content <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span>content<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>\n        file_name <span class="token operator">=</span> url<span class="token punctuation">.</span>rsplit<span class="token punctuation">(</span><span class="token string">&#39;_&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>\n        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>file_name<span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file_object<span class="token punctuation">:</span>\n            file_object<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;下载完成&#39;</span><span class="token punctuation">,</span>url<span class="token punctuation">)</span>\n\n<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">async</span> <span class="token keyword">with</span> aiohttp<span class="token punctuation">.</span>ClientSession<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> session<span class="token punctuation">:</span>\n        url_list <span class="token operator">=</span> <span class="token punctuation">[</span>\n            <span class="token string">&#39;https://www3.autoimg.cn/newsdfs/g26/M02/35/A9/120x90_0_autohomecar__ChsEe12AXQ6AOOH_AAFocMs8nzU621.jpg&#39;</span><span class="token punctuation">,</span>\n            <span class="token string">&#39;https://www2.autoimg.cn/newsdfs/g30/M01/3C/E2/120x90_0_autohomecar__ChcCSV2BBICAUntfAADjJFd6800429.jpg&#39;</span><span class="token punctuation">,</span>\n            <span class="token string">&#39;https://www3.autoimg.cn/newsdfs/g26/M0B/3C/65/120x90_0_autohomecar__ChcCP12BFCmAIO83AAGq7vK0sGY193.jpg&#39;</span>\n        <span class="token punctuation">]</span>\n        tasks <span class="token operator">=</span> <span class="token punctuation">[</span> asyncio<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>fetch<span class="token punctuation">(</span>session<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> url <span class="token keyword">in</span> url_list <span class="token punctuation">]</span>\n\n        <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>tasks<span class="token punctuation">)</span>\n\n\n<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>\n    asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span> main<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>测试时候发现 python3.6中<code>asyncio </code>没有找到<code>run</code>方法。</p><p>建议使用python3.8以上</p></div></li></ul><h2 id="_3-异步编程" tabindex="-1"><a class="header-anchor" href="#_3-异步编程" aria-hidden="true">#</a> 3.异步编程</h2><h3 id="_3-1-事件循环" tabindex="-1"><a class="header-anchor" href="#_3-1-事件循环" aria-hidden="true">#</a> 3.1 事件循环</h3><p>理解成为一个死循环 ，去检测并执行某些代码。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code># 伪代码\n\n任务列表 = [ 任务1, 任务2, 任务3,... ]\n\nwhile True:\n    可执行的任务列表，已完成的任务列表 = 去任务列表中检查所有的任务，将&#39;可执行&#39;和&#39;已完成&#39;的任务返回\n    \n    for 就绪任务 in 可执行的任务列表:\n        执行已就绪的任务\n        \n    for 已完成的任务 in 已完成的任务列表:\n        在任务列表中移除 已完成的任务\n\n\t如果 任务列表 中的任务都已完成，则终止循环\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">import</span> asyncio\n\n<span class="token comment"># 去生成或获取一个事件循环</span>\nloop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment"># 将任务放到`任务列表`</span>\nloop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>任务<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="_3-2-快速上手" tabindex="-1"><a class="header-anchor" href="#_3-2-快速上手" aria-hidden="true">#</a> 3.2 快速上手</h3><p>协程函数，定义函数时候 <code>async def 函数名</code> 。</p><p>协程对象，执行 协程函数() 得到的协程对象。</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">pass</span>\n\nresult <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>注意：执行协程函数创建协程对象，函数内部代码不会执行。</p><p>如果想要运行协程函数内部代码，必须要讲协程对象交给事件循环来处理。</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">import</span> asyncio \n\n<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;快来搞我吧！&quot;</span><span class="token punctuation">)</span>\n\nresult <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment"># loop = asyncio.get_event_loop()</span>\n<span class="token comment"># loop.run_until_complete( result )</span>\nasyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span> result <span class="token punctuation">)</span> <span class="token comment"># python3.7 </span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="_3-3-await" tabindex="-1"><a class="header-anchor" href="#_3-3-await" aria-hidden="true">#</a> 3.3 await</h3><p>await + 可等待的对象（协程对象、Future、Task对象 -&gt; IO等待）</p><p>示例1：</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">import</span> asyncio\n\n<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;来玩呀&quot;</span><span class="token punctuation">)</span>\n    response <span class="token operator">=</span> <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;结束&quot;</span><span class="token punctuation">,</span>response<span class="token punctuation">)</span>\n\nasyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span> func<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>示例2：</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">import</span> asyncio\n\n\n<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">others</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;start&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token string">&#39;返回值&#39;</span>\n\n\n<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;执行协程函数内部代码&quot;</span><span class="token punctuation">)</span>\n\n    <span class="token comment"># 遇到IO操作挂起当前协程（任务），等IO操作完成之后再继续往下执行。当前协程挂起时，事件循环可以去执行其他协程（任务）。</span>\n    response <span class="token operator">=</span> <span class="token keyword">await</span> others<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;IO请求结束，结果为：&quot;</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span>\n    \nasyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span> func<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>示例3：</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">import</span> asyncio\n\n\n<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">others</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;start&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token string">&#39;返回值&#39;</span>\n\n\n<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;执行协程函数内部代码&quot;</span><span class="token punctuation">)</span>\n\n    <span class="token comment"># 遇到IO操作挂起当前协程（任务），等IO操作完成之后再继续往下执行。当前协程挂起时，事件循环可以去执行其他协程（任务）。</span>\n    response1 <span class="token operator">=</span> <span class="token keyword">await</span> others<span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;IO请求结束，结果为：&quot;</span><span class="token punctuation">,</span> response1<span class="token punctuation">)</span>\n    \n    response2 <span class="token operator">=</span> <span class="token keyword">await</span> others<span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;IO请求结束，结果为：&quot;</span><span class="token punctuation">,</span> response2<span class="token punctuation">)</span>\n    \nasyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span> func<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>await就是等待对象的值得到结果之后再继续向下走。</p><h3 id="_3-4-task对象" tabindex="-1"><a class="header-anchor" href="#_3-4-task对象" aria-hidden="true">#</a> 3.4 Task对象</h3>',45),t=(0,p._)("p",null,[(0,p._)("em",null,"Tasks"),(0,p.Uk)(" are used to schedule coroutines "),(0,p._)("em",null,"concurrently"),(0,p.Uk)(".")],-1),o=(0,p._)("em",null,"Task",-1),c={href:"https://docs.python.org/3.8/library/asyncio-task.html#asyncio.create_task",target:"_blank",rel:"noopener noreferrer"},l=(0,p._)("code",null,"asyncio.create_task()",-1),u=(0,p.uE)('<p>白话：在事件循环中添加多个任务的。</p><p>Tasks用于并发调度协程，通过<code>asyncio.create_task(协程对象)</code>的方式创建Task对象，这样可以让协程加入事件循环中等待被调度执行。除了使用 <code>asyncio.create_task()</code> 函数以外，还可以用低层级的 <code>loop.create_task()</code> 或 <code>ensure_future()</code> 函数。不建议手动实例化 Task 对象。</p><p>注意：<code>asyncio.create_task()</code> 函数在 Python 3.7 中被加入。在 Python 3.7 之前，可以改用低层级的 <code>asyncio.ensure_future()</code> 函数。</p><p>示例1：</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">import</span> asyncio\n\n\n<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;返回值&quot;</span>\n\n\n<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;main开始&quot;</span><span class="token punctuation">)</span>\n\t\n \t<span class="token comment"># 创建Task对象，将当前执行func函数任务添加到事件循环。</span>\n    task1 <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span> func<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>\n\t\n    <span class="token comment"># 创建Task对象，将当前执行func函数任务添加到事件循环。</span>\n    task2 <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span> func<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>\n\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;main结束&quot;</span><span class="token punctuation">)</span>\n\n    <span class="token comment"># 当执行某协程遇到IO操作时，会自动化切换执行其他任务。</span>\n    <span class="token comment"># 此处的await是等待相对应的协程全都执行完毕并获取结果</span>\n    ret1 <span class="token operator">=</span> <span class="token keyword">await</span> task1\n    ret2 <span class="token operator">=</span> <span class="token keyword">await</span> task2\n    <span class="token keyword">print</span><span class="token punctuation">(</span>ret1<span class="token punctuation">,</span> ret2<span class="token punctuation">)</span>\n\n\nasyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span> main<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>示例2：</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">import</span> asyncio\n\n\n<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;返回值&quot;</span>\n\n\n<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;main开始&quot;</span><span class="token punctuation">)</span>\n\n    task_list <span class="token operator">=</span> <span class="token punctuation">[</span>\n        asyncio<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&#39;n1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        asyncio<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&#39;n2&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">]</span>\n\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;main结束&quot;</span><span class="token punctuation">)</span>\n\n    done<span class="token punctuation">,</span> pending <span class="token operator">=</span> <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>task_list<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span>done<span class="token punctuation">)</span>\n\n\nasyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>示例3：</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">import</span> asyncio\n\n\n<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;返回值&quot;</span>\n\n\ntask_list <span class="token operator">=</span> <span class="token punctuation">[</span>\n    func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\tfunc<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> \n<span class="token punctuation">]</span>\n\ndone<span class="token punctuation">,</span>pending <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span> asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>task_list<span class="token punctuation">)</span> <span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>done<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="_3-5-asyncio-future对象" tabindex="-1"><a class="header-anchor" href="#_3-5-asyncio-future对象" aria-hidden="true">#</a> 3.5 asyncio.Future对象</h3><blockquote><p>A <code>Future</code>is a special <strong>low-level</strong> awaitable object that represents an <strong>eventual result</strong> of an asynchronous operation.</p></blockquote><p>Task继承Future，Task对象内部await结果的处理基于Future对象来的。</p><p>示例1：</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token comment"># 获取当前事件循环</span>\n    loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_running_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n    <span class="token comment"># 创建一个任务（Future对象），这个任务什么都不干。</span>\n    fut <span class="token operator">=</span> loop<span class="token punctuation">.</span>create_future<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n    <span class="token comment"># 等待任务最终结果（Future对象），没有结果则会一直等下去。</span>\n    <span class="token keyword">await</span> fut\n\nasyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span> main<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>示例2：</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">import</span> asyncio\n\n\n<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">set_after</span><span class="token punctuation">(</span>fut<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n    fut<span class="token punctuation">.</span>set_result<span class="token punctuation">(</span><span class="token string">&quot;666&quot;</span><span class="token punctuation">)</span>\n\n\n<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token comment"># 获取当前事件循环</span>\n    loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_running_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n    <span class="token comment"># 创建一个任务（Future对象），没绑定任何行为，则这个任务永远不知道什么时候结束。</span>\n    fut <span class="token operator">=</span> loop<span class="token punctuation">.</span>create_future<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n    <span class="token comment"># 创建一个任务（Task对象），绑定了set_after函数，函数内部在2s之后，会给fut赋值。</span>\n    <span class="token comment"># 即手动设置future任务的最终结果，那么fut就可以结束了。</span>\n    <span class="token keyword">await</span> loop<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>  set_after<span class="token punctuation">(</span>fut<span class="token punctuation">)</span> <span class="token punctuation">)</span>\n\n    <span class="token comment"># 等待 Future对象获取 最终结果，否则一直等下去</span>\n    data <span class="token operator">=</span> <span class="token keyword">await</span> fut\n    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>\n\nasyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span> main<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h3 id="_3-5-concurrent-futures-future对象" tabindex="-1"><a class="header-anchor" href="#_3-5-concurrent-futures-future对象" aria-hidden="true">#</a> 3.5 concurrent.futures.Future对象</h3><p>使用线程池、进程池实现异步操作时用到的对象。</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">import</span> time\n<span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> Future\n<span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures<span class="token punctuation">.</span>thread <span class="token keyword">import</span> ThreadPoolExecutor\n<span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures<span class="token punctuation">.</span>process <span class="token keyword">import</span> ProcessPoolExecutor\n\n\n<span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token number">123</span>\n\n<span class="token comment"># 创建线程池</span>\npool <span class="token operator">=</span> ThreadPoolExecutor<span class="token punctuation">(</span>max_workers<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>\n\n<span class="token comment"># 创建进程池</span>\n<span class="token comment"># pool = ProcessPoolExecutor(max_workers=5)</span>\n\n\n<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    fut <span class="token operator">=</span> pool<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>func<span class="token punctuation">,</span> i<span class="token punctuation">)</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span>fut<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>以后写代码可能会存在交叉时间。例如：crm项目80%都是基于协程异步编程 + MySQL（不支持）【线程、进程做异步编程】。</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">import</span> time\n<span class="token keyword">import</span> asyncio\n<span class="token keyword">import</span> concurrent<span class="token punctuation">.</span>futures\n\n<span class="token keyword">def</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token comment"># 某个耗时操作</span>\n    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;SB&quot;</span>\n\n<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_running_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n    <span class="token comment"># 1. Run in the default loop&#39;s executor ( 默认ThreadPoolExecutor )</span>\n    <span class="token comment"># 第一步：内部会先调用 ThreadPoolExecutor 的 submit 方法去线程池中申请一个线程去执行func1函数，并返回一个concurrent.futures.Future对象</span>\n    <span class="token comment"># 第二步：调用asyncio.wrap_future将concurrent.futures.Future对象包装为asycio.Future对象。</span>\n    <span class="token comment"># 因为concurrent.futures.Future对象不支持await语法，所以需要包装为 asycio.Future对象 才能使用。</span>\n    fut <span class="token operator">=</span> loop<span class="token punctuation">.</span>run_in_executor<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> func1<span class="token punctuation">)</span>\n    result <span class="token operator">=</span> <span class="token keyword">await</span> fut\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;default thread pool&#39;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>\n\n    <span class="token comment"># 2. Run in a custom thread pool:</span>\n    <span class="token comment"># with concurrent.futures.ThreadPoolExecutor() as pool:</span>\n    <span class="token comment">#     result = await loop.run_in_executor(</span>\n    <span class="token comment">#         pool, func1)</span>\n    <span class="token comment">#     print(&#39;custom thread pool&#39;, result)</span>\n\n    <span class="token comment"># 3. Run in a custom process pool:</span>\n    <span class="token comment"># with concurrent.futures.ProcessPoolExecutor() as pool:</span>\n    <span class="token comment">#     result = await loop.run_in_executor(</span>\n    <span class="token comment">#         pool, func1)</span>\n    <span class="token comment">#     print(&#39;custom process pool&#39;, result)</span>\n\nasyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span> main<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><p>案例：asyncio + 不支持异步的模块</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">import</span> asyncio\n<span class="token keyword">import</span> requests\n\n\n<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">download_image</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token comment"># 发送网络请求，下载图片（遇到网络下载图片的IO请求，自动化切换到其他任务）</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;开始下载:&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>\n\n    loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token comment"># requests模块默认不支持异步操作，所以就使用线程池来配合实现了。</span>\n    future <span class="token operator">=</span> loop<span class="token punctuation">.</span>run_in_executor<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">,</span> url<span class="token punctuation">)</span>\n\n    response <span class="token operator">=</span> <span class="token keyword">await</span> future\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;下载完成&#39;</span><span class="token punctuation">)</span>\n    <span class="token comment"># 图片保存到本地文件</span>\n    file_name <span class="token operator">=</span> url<span class="token punctuation">.</span>rsplit<span class="token punctuation">(</span><span class="token string">&#39;_&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>\n    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>file_name<span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file_object<span class="token punctuation">:</span>\n        file_object<span class="token punctuation">.</span>write<span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span>\n\n\n<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>\n    url_list <span class="token operator">=</span> <span class="token punctuation">[</span>\n        <span class="token string">&#39;https://www3.autoimg.cn/newsdfs/g26/M02/35/A9/120x90_0_autohomecar__ChsEe12AXQ6AOOH_AAFocMs8nzU621.jpg&#39;</span><span class="token punctuation">,</span>\n        <span class="token string">&#39;https://www2.autoimg.cn/newsdfs/g30/M01/3C/E2/120x90_0_autohomecar__ChcCSV2BBICAUntfAADjJFd6800429.jpg&#39;</span><span class="token punctuation">,</span>\n        <span class="token string">&#39;https://www3.autoimg.cn/newsdfs/g26/M0B/3C/65/120x90_0_autohomecar__ChcCP12BFCmAIO83AAGq7vK0sGY193.jpg&#39;</span>\n    <span class="token punctuation">]</span>\n\n    tasks <span class="token operator">=</span> <span class="token punctuation">[</span> download_image<span class="token punctuation">(</span>url<span class="token punctuation">)</span>  <span class="token keyword">for</span> url <span class="token keyword">in</span> url_list<span class="token punctuation">]</span>\n\n    loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>\n    loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span> asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>tasks<span class="token punctuation">)</span> <span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><h3 id="_3-7-异步迭代器" tabindex="-1"><a class="header-anchor" href="#_3-7-异步迭代器" aria-hidden="true">#</a> 3.7 异步迭代器</h3><p><strong>什么是异步迭代器</strong></p>',25),r={href:"https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__aiter__",target:"_blank",rel:"noopener noreferrer"},i=(0,p._)("code",null,"__aiter__()",-1),k={href:"https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__anext__",target:"_blank",rel:"noopener noreferrer"},b=(0,p._)("code",null,"__anext__()",-1),m=(0,p._)("code",null,"__anext__",-1),d={href:"https://docs.python.org/zh-cn/3.8/glossary.html#term-awaitable",target:"_blank",rel:"noopener noreferrer"},y={href:"https://docs.python.org/zh-cn/3.8/reference/compound_stmts.html#async-for",target:"_blank",rel:"noopener noreferrer"},w=(0,p._)("code",null,"async for",-1),g={href:"https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__anext__",target:"_blank",rel:"noopener noreferrer"},h=(0,p._)("code",null,"__anext__()",-1),_={href:"https://docs.python.org/zh-cn/3.8/library/exceptions.html#StopAsyncIteration",target:"_blank",rel:"noopener noreferrer"},f=(0,p._)("code",null,"StopAsyncIteration",-1),v={href:"https://www.python.org/dev/peps/pep-0492",target:"_blank",rel:"noopener noreferrer"},q=(0,p._)("strong",null,"PEP 492",-1),x=(0,p._)("p",null,[(0,p._)("strong",null,"什么是异步可迭代对象？")],-1),O={href:"https://docs.python.org/zh-cn/3.8/reference/compound_stmts.html#async-for",target:"_blank",rel:"noopener noreferrer"},I=(0,p._)("code",null,"async for",-1),A={href:"https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__aiter__",target:"_blank",rel:"noopener noreferrer"},C=(0,p._)("code",null,"__aiter__()",-1),F={href:"https://docs.python.org/zh-cn/3.8/glossary.html#term-asynchronous-iterator",target:"_blank",rel:"noopener noreferrer"},U={href:"https://www.python.org/dev/peps/pep-0492",target:"_blank",rel:"noopener noreferrer"},P=(0,p._)("strong",null,"PEP 492",-1),E=(0,p.uE)('<div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">import</span> asyncio\n\n<span class="token keyword">class</span> <span class="token class-name">Reader</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token triple-quoted-string string">&quot;&quot;&quot; 自定义异步迭代器（同时也是异步可迭代对象） &quot;&quot;&quot;</span>\n\n    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        self<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span>\n\n    <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">readline</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token comment"># await asyncio.sleep(1)</span>\n        self<span class="token punctuation">.</span>count <span class="token operator">+=</span> <span class="token number">1</span>\n        <span class="token keyword">if</span> self<span class="token punctuation">.</span>count <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">:</span>\n            <span class="token keyword">return</span> <span class="token boolean">None</span>\n        <span class="token keyword">return</span> self<span class="token punctuation">.</span>count\n\n    <span class="token keyword">def</span> <span class="token function">__aiter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">return</span> self\n\n    <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">__anext__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        val <span class="token operator">=</span> <span class="token keyword">await</span> self<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token keyword">if</span> val <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>\n            <span class="token keyword">raise</span> StopAsyncIteration\n        <span class="token keyword">return</span> val\n    \n<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    obj <span class="token operator">=</span> Reader<span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">async</span> <span class="token keyword">for</span> item <span class="token keyword">in</span> obj<span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>\n        \nasyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span> func<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h3 id="_3-8-异步上下文管理器" tabindex="-1"><a class="header-anchor" href="#_3-8-异步上下文管理器" aria-hidden="true">#</a> 3.8 异步上下文管理器</h3>',2),j={href:"https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__aenter__",target:"_blank",rel:"noopener noreferrer"},T=(0,p._)("code",null,"__aenter__()",-1),S={href:"https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__aexit__",target:"_blank",rel:"noopener noreferrer"},z=(0,p._)("code",null,"__aexit__()",-1),M={href:"https://docs.python.org/zh-cn/3.8/reference/compound_stmts.html#async-with",target:"_blank",rel:"noopener noreferrer"},W=(0,p._)("code",null,"async with",-1),R={href:"https://www.python.org/dev/peps/pep-0492",target:"_blank",rel:"noopener noreferrer"},B=(0,p._)("strong",null,"PEP 492",-1),L=(0,p.uE)('<div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">import</span> asyncio\n\n\n<span class="token keyword">class</span> <span class="token class-name">AsyncContextManager</span><span class="token punctuation">:</span>\n\t<span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        self<span class="token punctuation">.</span>conn <span class="token operator">=</span> conn\n        \n    <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">do_something</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token comment"># 异步操作数据库</span>\n        <span class="token keyword">return</span> <span class="token number">666</span>\n\n    <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">__aenter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token comment"># 异步链接数据库</span>\n        self<span class="token punctuation">.</span>conn <span class="token operator">=</span> <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n        <span class="token keyword">return</span> self\n\n    <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">__aexit__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> exc_type<span class="token punctuation">,</span> exc<span class="token punctuation">,</span> tb<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token comment"># 异步关闭数据库链接</span>\n\t\t<span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n\n<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">async</span> <span class="token keyword">with</span> AsyncContextManager<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>\n        result <span class="token operator">=</span> <span class="token keyword">await</span> f<span class="token punctuation">.</span>do_something<span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>\n\nasyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span> func<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h2 id="_4-uvloop" tabindex="-1"><a class="header-anchor" href="#_4-uvloop" aria-hidden="true">#</a> 4.uvloop</h2><p>是asyncio的事件循环的替代方案。事件循环 &gt; 默认asyncio的事件循环。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>pip3 install uvloop\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">import</span> asyncio\n<span class="token keyword">import</span> uvloop\nasyncio<span class="token punctuation">.</span>set_event_loop_policy<span class="token punctuation">(</span>uvloop<span class="token punctuation">.</span>EventLoopPolicy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment"># 编写asyncio的代码，与之前写的代码一致。</span>\n\n<span class="token comment"># 内部的事件循环自动化会变为uvloop</span>\nasyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>注意：一个asgi -&gt; <code>uvicorn</code> 内部使用的就是uvloop</p><h2 id="_5-实战案例" tabindex="-1"><a class="header-anchor" href="#_5-实战案例" aria-hidden="true">#</a> 5.实战案例</h2><h3 id="_5-1-异步redis" tabindex="-1"><a class="header-anchor" href="#_5-1-异步redis" aria-hidden="true">#</a> 5.1 异步redis</h3><p>在使用python代码操作redis时，链接/操作/断开都是网络IO。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>pip3 install aioredis\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>示例1：</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment">#!/usr/bin/env python</span>\n<span class="token comment"># -*- coding:utf-8 -*-</span>\n<span class="token keyword">import</span> asyncio\n<span class="token keyword">import</span> aioredis\n\n\n<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">execute</span><span class="token punctuation">(</span>address<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;开始执行&quot;</span><span class="token punctuation">,</span> address<span class="token punctuation">)</span>\n    <span class="token comment"># 网络IO操作：创建redis连接</span>\n    redis <span class="token operator">=</span> <span class="token keyword">await</span> aioredis<span class="token punctuation">.</span>create_redis<span class="token punctuation">(</span>address<span class="token punctuation">,</span> password<span class="token operator">=</span>password<span class="token punctuation">)</span>\n\n    <span class="token comment"># 网络IO操作：在redis中设置哈希值car，内部在设三个键值对，即： redis = { car:{key1:1,key2:2,key3:3}}</span>\n    <span class="token keyword">await</span> redis<span class="token punctuation">.</span>hmset_dict<span class="token punctuation">(</span><span class="token string">&#39;car&#39;</span><span class="token punctuation">,</span> key1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> key2<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> key3<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>\n\n    <span class="token comment"># 网络IO操作：去redis中获取值</span>\n    result <span class="token operator">=</span> <span class="token keyword">await</span> redis<span class="token punctuation">.</span>hgetall<span class="token punctuation">(</span><span class="token string">&#39;car&#39;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>\n\n    redis<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token comment"># 网络IO操作：关闭redis连接</span>\n    <span class="token keyword">await</span> redis<span class="token punctuation">.</span>wait_closed<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;结束&quot;</span><span class="token punctuation">,</span> address<span class="token punctuation">)</span>\n\n\nasyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span> execute<span class="token punctuation">(</span><span class="token string">&#39;redis://47.93.4.198:6379&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;root!2345&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>示例2：</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">import</span> asyncio\n<span class="token keyword">import</span> aioredis\n\n\n<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">execute</span><span class="token punctuation">(</span>address<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;开始执行&quot;</span><span class="token punctuation">,</span> address<span class="token punctuation">)</span>\n\n    <span class="token comment"># 网络IO操作：先去连接 47.93.4.197:6379，遇到IO则自动切换任务，去连接47.93.4.198:6379</span>\n    redis <span class="token operator">=</span> <span class="token keyword">await</span> aioredis<span class="token punctuation">.</span>create_redis_pool<span class="token punctuation">(</span>address<span class="token punctuation">,</span> password<span class="token operator">=</span>password<span class="token punctuation">)</span>\n\n    <span class="token comment"># 网络IO操作：遇到IO会自动切换任务</span>\n    <span class="token keyword">await</span> redis<span class="token punctuation">.</span>hmset_dict<span class="token punctuation">(</span><span class="token string">&#39;car&#39;</span><span class="token punctuation">,</span> key1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> key2<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> key3<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>\n\n    <span class="token comment"># 网络IO操作：遇到IO会自动切换任务</span>\n    result <span class="token operator">=</span> <span class="token keyword">await</span> redis<span class="token punctuation">.</span>hgetall<span class="token punctuation">(</span><span class="token string">&#39;car&#39;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>\n\n    redis<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token comment"># 网络IO操作：遇到IO会自动切换任务</span>\n    <span class="token keyword">await</span> redis<span class="token punctuation">.</span>wait_closed<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;结束&quot;</span><span class="token punctuation">,</span> address<span class="token punctuation">)</span>\n\n\ntask_list <span class="token operator">=</span> <span class="token punctuation">[</span>\n    execute<span class="token punctuation">(</span><span class="token string">&#39;redis://47.93.4.197:6379&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;root!2345&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    execute<span class="token punctuation">(</span><span class="token string">&#39;redis://47.93.4.198:6379&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;root!2345&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span>\n\nasyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>task_list<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h3 id="_5-2-异步mysql" tabindex="-1"><a class="header-anchor" href="#_5-2-异步mysql" aria-hidden="true">#</a> 5.2 异步MySQL</h3><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>pip3 install aiomysql\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>示例1：</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">import</span> asyncio\n<span class="token keyword">import</span> aiomysql\n\n\n<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token comment"># 网络IO操作：连接MySQL</span>\n    conn <span class="token operator">=</span> <span class="token keyword">await</span> aiomysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">&#39;127.0.0.1&#39;</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token string">&#39;mysql&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">)</span>\n\n    <span class="token comment"># 网络IO操作：创建CURSOR</span>\n    cur <span class="token operator">=</span> <span class="token keyword">await</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n    <span class="token comment"># 网络IO操作：执行SQL</span>\n    <span class="token keyword">await</span> cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">&quot;SELECT Host,User FROM user&quot;</span><span class="token punctuation">)</span>\n\n    <span class="token comment"># 网络IO操作：获取SQL结果</span>\n    result <span class="token operator">=</span> <span class="token keyword">await</span> cur<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>\n\n    <span class="token comment"># 网络IO操作：关闭链接</span>\n    <span class="token keyword">await</span> cur<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>\n    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n\nasyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>示例2：</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment">#!/usr/bin/env python</span>\n<span class="token comment"># -*- coding:utf-8 -*-</span>\n<span class="token keyword">import</span> asyncio\n<span class="token keyword">import</span> aiomysql\n\n\n<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">execute</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;开始&quot;</span><span class="token punctuation">,</span> host<span class="token punctuation">)</span>\n    <span class="token comment"># 网络IO操作：先去连接 47.93.40.197，遇到IO则自动切换任务，去连接47.93.40.198:6379</span>\n    conn <span class="token operator">=</span> <span class="token keyword">await</span> aiomysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span>host<span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">,</span> password<span class="token operator">=</span>password<span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token string">&#39;mysql&#39;</span><span class="token punctuation">)</span>\n\n    <span class="token comment"># 网络IO操作：遇到IO会自动切换任务</span>\n    cur <span class="token operator">=</span> <span class="token keyword">await</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n    <span class="token comment"># 网络IO操作：遇到IO会自动切换任务</span>\n    <span class="token keyword">await</span> cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">&quot;SELECT Host,User FROM user&quot;</span><span class="token punctuation">)</span>\n\n    <span class="token comment"># 网络IO操作：遇到IO会自动切换任务</span>\n    result <span class="token operator">=</span> <span class="token keyword">await</span> cur<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>\n\n    <span class="token comment"># 网络IO操作：遇到IO会自动切换任务</span>\n    <span class="token keyword">await</span> cur<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>\n    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;结束&quot;</span><span class="token punctuation">,</span> host<span class="token punctuation">)</span>\n\n\ntask_list <span class="token operator">=</span> <span class="token punctuation">[</span>\n    execute<span class="token punctuation">(</span><span class="token string">&#39;47.93.41.197&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;root!2345&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    execute<span class="token punctuation">(</span><span class="token string">&#39;47.93.40.197&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;root!2345&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span>\n\nasyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>task_list<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><h3 id="_5-3-fastapi框架" tabindex="-1"><a class="header-anchor" href="#_5-3-fastapi框架" aria-hidden="true">#</a> 5.3 FastAPI框架</h3><p>安装</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>pip3 install fastapi\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>pip3 install uvicorn (asgi内部基于uvloop)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>示例： luffy.py</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment">#!/usr/bin/env python</span>\n<span class="token comment"># -*- coding:utf-8 -*-</span>\n<span class="token keyword">import</span> asyncio\n\n<span class="token keyword">import</span> uvicorn\n<span class="token keyword">import</span> aioredis\n<span class="token keyword">from</span> aioredis <span class="token keyword">import</span> Redis\n<span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI\n\napp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment"># 创建一个redis连接池</span>\nREDIS_POOL <span class="token operator">=</span> aioredis<span class="token punctuation">.</span>ConnectionsPool<span class="token punctuation">(</span><span class="token string">&#39;redis://47.193.14.198:6379&#39;</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">&quot;root123&quot;</span><span class="token punctuation">,</span> minsize<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> maxsize<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>\n\n\n<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token triple-quoted-string string">&quot;&quot;&quot; 普通操作接口 &quot;&quot;&quot;</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">}</span>\n\n\n<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">&quot;/red&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">red</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token triple-quoted-string string">&quot;&quot;&quot; 异步操作接口 &quot;&quot;&quot;</span>\n    \n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;请求来了&quot;</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>\n    <span class="token comment"># 连接池获取一个连接</span>\n    conn <span class="token operator">=</span> <span class="token keyword">await</span> REDIS_POOL<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>\n    redis <span class="token operator">=</span> Redis<span class="token punctuation">(</span>conn<span class="token punctuation">)</span>\n\n    <span class="token comment"># 设置值</span>\n    <span class="token keyword">await</span> redis<span class="token punctuation">.</span>hmset_dict<span class="token punctuation">(</span><span class="token string">&#39;car&#39;</span><span class="token punctuation">,</span> key1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> key2<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> key3<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>\n\n    <span class="token comment"># 读取值</span>\n    result <span class="token operator">=</span> <span class="token keyword">await</span> redis<span class="token punctuation">.</span>hgetall<span class="token punctuation">(</span><span class="token string">&#39;car&#39;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>\n\n    <span class="token comment"># 连接归还连接池</span>\n    REDIS_POOL<span class="token punctuation">.</span>release<span class="token punctuation">(</span>conn<span class="token punctuation">)</span>\n\n    <span class="token keyword">return</span> result\n\n\n<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>\n    uvicorn<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">&quot;luffy:app&quot;</span><span class="token punctuation">,</span> host<span class="token operator">=</span><span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">5000</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">&quot;info&quot;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br></div></div><h3 id="_5-4-爬虫" tabindex="-1"><a class="header-anchor" href="#_5-4-爬虫" aria-hidden="true">#</a> 5.4 爬虫</h3><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>pip3 install aiohttp\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">import</span> aiohttp\n<span class="token keyword">import</span> asyncio\n\n\n<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">fetch</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;发送请求：&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>\n    <span class="token keyword">async</span> <span class="token keyword">with</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> verify_ssl<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token keyword">as</span> response<span class="token punctuation">:</span>\n        text <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;得到结果：&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token keyword">return</span> text\n\n\n<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">async</span> <span class="token keyword">with</span> aiohttp<span class="token punctuation">.</span>ClientSession<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> session<span class="token punctuation">:</span>\n        url_list <span class="token operator">=</span> <span class="token punctuation">[</span>\n            <span class="token string">&#39;https://python.org&#39;</span><span class="token punctuation">,</span>\n            <span class="token string">&#39;https://www.baidu.com&#39;</span><span class="token punctuation">,</span>\n            <span class="token string">&#39;https://www.pythonav.com&#39;</span>\n        <span class="token punctuation">]</span>\n        tasks <span class="token operator">=</span> <span class="token punctuation">[</span> asyncio<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>fetch<span class="token punctuation">(</span>session<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> url <span class="token keyword">in</span> url_list<span class="token punctuation">]</span>\n\n        done<span class="token punctuation">,</span>pending <span class="token operator">=</span> <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>tasks<span class="token punctuation">)</span>\n\n\n<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>\n    asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span> main<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>最大的意义：通过一个线程利用其IO等待时间去做一些其他事情。</p>',31),Q={},N=(0,a(3744).Z)(Q,[["render",function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[e,(0,p._)("blockquote",null,[t,(0,p._)("p",null,[(0,p.Uk)("When a coroutine is wrapped into a "),o,(0,p.Uk)(" with functions like "),(0,p._)("a",c,[l,(0,p.Wm)(a)]),(0,p.Uk)(" the coroutine is automatically scheduled to run soon。")])]),u,(0,p._)("p",null,[(0,p.Uk)("实现了 "),(0,p._)("a",r,[i,(0,p.Wm)(a)]),(0,p.Uk)(" 和 "),(0,p._)("a",k,[b,(0,p.Wm)(a)]),(0,p.Uk)(" 方法的对象。"),m,(0,p.Uk)(" 必须返回一个 "),(0,p._)("a",d,[(0,p.Uk)("awaitable"),(0,p.Wm)(a)]),(0,p.Uk)(" 对象。"),(0,p._)("a",y,[w,(0,p.Wm)(a)]),(0,p.Uk)(" 会处理异步迭代器的 "),(0,p._)("a",g,[h,(0,p.Wm)(a)]),(0,p.Uk)(" 方法所返回的可等待对象，直到其引发一个 "),(0,p._)("a",_,[f,(0,p.Wm)(a)]),(0,p.Uk)(" 异常。由 "),(0,p._)("a",v,[q,(0,p.Wm)(a)]),(0,p.Uk)(" 引入。")]),x,(0,p._)("p",null,[(0,p.Uk)("可在 "),(0,p._)("a",O,[I,(0,p.Wm)(a)]),(0,p.Uk)(" 语句中被使用的对象。必须通过它的 "),(0,p._)("a",A,[C,(0,p.Wm)(a)]),(0,p.Uk)(" 方法返回一个 "),(0,p._)("a",F,[(0,p.Uk)("asynchronous iterator"),(0,p.Wm)(a)]),(0,p.Uk)("。由 "),(0,p._)("a",U,[P,(0,p.Wm)(a)]),(0,p.Uk)(" 引入。")]),E,(0,p._)("p",null,[(0,p.Uk)("此种对象通过定义 "),(0,p._)("a",j,[T,(0,p.Wm)(a)]),(0,p.Uk)(" 和 "),(0,p._)("a",S,[z,(0,p.Wm)(a)]),(0,p.Uk)(" 方法来对 "),(0,p._)("a",M,[W,(0,p.Wm)(a)]),(0,p.Uk)(" 语句中的环境进行控制。由 "),(0,p._)("a",R,[B,(0,p.Wm)(a)]),(0,p.Uk)(" 引入。")]),L],64)}]])}}]);